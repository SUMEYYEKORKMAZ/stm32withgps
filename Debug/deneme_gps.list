
deneme_gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004fa0  08004fa0  00014fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800503c  0800503c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005044  08005044  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800504c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  080050bc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080050bc  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a387  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abb  00000000  00000000  0002a427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002175f  00000000  00000000  0002cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af82  00000000  00000000  0004e50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8dd6  00000000  00000000  00059491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122267  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  001222b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f88 	.word	0x08004f88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004f88 	.word	0x08004f88

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d106      	bne.n	8000dd2 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3371      	adds	r3, #113	; 0x71
 8000dc8:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8000dca:	e002      	b.n	8000dd2 <prv_parse_number+0x22>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <prv_parse_number+0x30>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b20      	cmp	r3, #32
 8000dde:	d0f5      	beq.n	8000dcc <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b2d      	cmp	r3, #45	; 0x2d
 8000de6:	d104      	bne.n	8000df2 <prv_parse_number+0x42>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <prv_parse_number+0x44>
 8000df2:	2300      	movs	r3, #0
 8000df4:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000df6:	e00d      	b.n	8000e14 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	461a      	mov	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	3b30      	subs	r3, #48	; 0x30
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <prv_parse_number+0x7a>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b2f      	cmp	r3, #47	; 0x2f
 8000e20:	d903      	bls.n	8000e2a <prv_parse_number+0x7a>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b39      	cmp	r3, #57	; 0x39
 8000e28:	d9e6      	bls.n	8000df8 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000e2a:	7afb      	ldrb	r3, [r7, #11]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <prv_parse_number+0x86>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	425b      	negs	r3, r3
 8000e34:	e000      	b.n	8000e38 <prv_parse_number+0x88>
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <prv_parse_float_number+0x150>)
 8000e60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <prv_parse_float_number+0x38>
        t = gh->p.term_str;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3371      	adds	r3, #113	; 0x71
 8000e72:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8000e74:	e002      	b.n	8000e7c <prv_parse_float_number+0x38>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <prv_parse_float_number+0x46>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b20      	cmp	r3, #32
 8000e88:	d0f5      	beq.n	8000e76 <prv_parse_float_number+0x32>

    if (*t == '-') { /* Check sign */
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b2d      	cmp	r3, #45	; 0x2d
 8000e90:	d124      	bne.n	8000edc <prv_parse_float_number+0x98>
        sign = -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	60fb      	str	r3, [r7, #12]
        ++t;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 8000e9e:	e01d      	b.n	8000edc <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <prv_parse_float_number+0x154>)
 8000ea6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000eaa:	f7ff fbc5 	bl	8000638 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4614      	mov	r4, r2
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3b30      	subs	r3, #48	; 0x30
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fb51 	bl	8000564 <__aeabi_i2d>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	4629      	mov	r1, r5
 8000eca:	f7ff f9ff 	bl	80002cc <__adddf3>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++t;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ee2:	d903      	bls.n	8000eec <prv_parse_float_number+0xa8>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b39      	cmp	r3, #57	; 0x39
 8000eea:	d9d9      	bls.n	8000ea0 <prv_parse_float_number+0x5c>
    }
    if (*t == '.') { /* Skip the dot character */
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8000ef2:	d12c      	bne.n	8000f4e <prv_parse_float_number+0x10a>
        ++t;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 8000efa:	e028      	b.n	8000f4e <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <prv_parse_float_number+0x154>)
 8000f02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f06:	f7ff fb97 	bl	8000638 <__aeabi_dmul>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4614      	mov	r4, r2
 8000f10:	461d      	mov	r5, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3b30      	subs	r3, #48	; 0x30
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb23 	bl	8000564 <__aeabi_i2d>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4620      	mov	r0, r4
 8000f24:	4629      	mov	r1, r5
 8000f26:	f7ff f9d1 	bl	80002cc <__adddf3>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= 10.0;
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <prv_parse_float_number+0x154>)
 8000f38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f3c:	f7ff fb7c 	bl	8000638 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++t;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b2f      	cmp	r3, #47	; 0x2f
 8000f54:	d903      	bls.n	8000f5e <prv_parse_float_number+0x11a>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b39      	cmp	r3, #57	; 0x39
 8000f5c:	d9ce      	bls.n	8000efc <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff fb00 	bl	8000564 <__aeabi_i2d>
 8000f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f68:	f7ff fb66 	bl	8000638 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f78:	f7ff fc88 	bl	800088c <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f84:	eeb0 0a47 	vmov.f32	s0, s14
 8000f88:	eef0 0a67 	vmov.f32	s1, s15
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bdb0      	pop	{r4, r5, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	3ff00000 	.word	0x3ff00000
 8000f98:	40240000 	.word	0x40240000

08000f9c <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL); /* Parse value as double */
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff4c 	bl	8000e44 <prv_parse_float_number>
 8000fac:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));       /* Get absolute degrees value, interested in integer part only */
 8000fb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fb4:	f7ff fd52 	bl	8000a5c <__aeabi_d2iz>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <prv_parse_lat_long+0x94>)
 8000fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc0:	1152      	asrs	r2, r2, #5
 8000fc2:	17db      	asrs	r3, r3, #31
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff facc 	bl	8000564 <__aeabi_i2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));           /* Get remaining part from full number, minutes */
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <prv_parse_lat_long+0x98>)
 8000fda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fde:	f7ff fb2b 	bl	8000638 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fea:	f7ff f96d 	bl	80002c8 <__aeabi_dsub>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));          /* Calculate latitude/longitude */
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <prv_parse_lat_long+0x9c>)
 8000ffc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001000:	f7ff fc44 	bl	800088c <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800100c:	f7ff f95e 	bl	80002cc <__adddf3>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800101c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001020:	eeb0 0a47 	vmov.f32	s0, s14
 8001024:	eef0 0a67 	vmov.f32	s1, s15
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	51eb851f 	.word	0x51eb851f
 8001034:	40590000 	.word	0x40590000
 8001038:	404e0000 	.word	0x404e0000

0800103c <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 800103c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) { /* Check string type */
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 800104c:	2900      	cmp	r1, #0
 800104e:	d169      	bne.n	8001124 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3371      	adds	r3, #113	; 0x71
 8001054:	2206      	movs	r2, #6
 8001056:	49ba      	ldr	r1, [pc, #744]	; (8001340 <prv_parse_term+0x304>)
 8001058:	4618      	mov	r0, r3
 800105a:	f003 fb41 	bl	80046e0 <strncmp>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d009      	beq.n	8001078 <prv_parse_term+0x3c>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3371      	adds	r3, #113	; 0x71
 8001068:	2206      	movs	r2, #6
 800106a:	49b6      	ldr	r1, [pc, #728]	; (8001344 <prv_parse_term+0x308>)
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fb37 	bl	80046e0 <strncmp>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d104      	bne.n	8001082 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001080:	e04e      	b.n	8001120 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3371      	adds	r3, #113	; 0x71
 8001086:	2206      	movs	r2, #6
 8001088:	49af      	ldr	r1, [pc, #700]	; (8001348 <prv_parse_term+0x30c>)
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fb28 	bl	80046e0 <strncmp>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d009      	beq.n	80010aa <prv_parse_term+0x6e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3371      	adds	r3, #113	; 0x71
 800109a:	2206      	movs	r2, #6
 800109c:	49ab      	ldr	r1, [pc, #684]	; (800134c <prv_parse_term+0x310>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fb1e 	bl	80046e0 <strncmp>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2202      	movs	r2, #2
 80010ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80010b2:	e035      	b.n	8001120 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3371      	adds	r3, #113	; 0x71
 80010b8:	2206      	movs	r2, #6
 80010ba:	49a5      	ldr	r1, [pc, #660]	; (8001350 <prv_parse_term+0x314>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 fb0f 	bl	80046e0 <strncmp>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d009      	beq.n	80010dc <prv_parse_term+0xa0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3371      	adds	r3, #113	; 0x71
 80010cc:	2206      	movs	r2, #6
 80010ce:	49a1      	ldr	r1, [pc, #644]	; (8001354 <prv_parse_term+0x318>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fb05 	bl	80046e0 <strncmp>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d104      	bne.n	80010e6 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2203      	movs	r2, #3
 80010e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80010e4:	e01c      	b.n	8001120 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3371      	adds	r3, #113	; 0x71
 80010ea:	2206      	movs	r2, #6
 80010ec:	499a      	ldr	r1, [pc, #616]	; (8001358 <prv_parse_term+0x31c>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 faf6 	bl	80046e0 <strncmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <prv_parse_term+0xd2>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3371      	adds	r3, #113	; 0x71
 80010fe:	2206      	movs	r2, #6
 8001100:	4996      	ldr	r1, [pc, #600]	; (800135c <prv_parse_term+0x320>)
 8001102:	4618      	mov	r0, r3
 8001104:	f003 faec 	bl	80046e0 <strncmp>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d104      	bne.n	8001118 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001116:	e003      	b.n	8001120 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8001120:	2301      	movs	r3, #1
 8001122:	e233      	b.n	800158c <prv_parse_term+0x550>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800112a:	2900      	cmp	r1, #0
 800112c:	f000 822d 	beq.w	800158a <prv_parse_term+0x54e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001136:	2901      	cmp	r1, #1
 8001138:	f040 80c9 	bne.w	80012ce <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001142:	3b01      	subs	r3, #1
 8001144:	2b0a      	cmp	r3, #10
 8001146:	f200 8213 	bhi.w	8001570 <prv_parse_term+0x534>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <prv_parse_term+0x114>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	0800117d 	.word	0x0800117d
 8001154:	080011f7 	.word	0x080011f7
 8001158:	0800120d 	.word	0x0800120d
 800115c:	08001237 	.word	0x08001237
 8001160:	0800124d 	.word	0x0800124d
 8001164:	08001277 	.word	0x08001277
 8001168:	0800128b 	.word	0x0800128b
 800116c:	08001571 	.word	0x08001571
 8001170:	0800129f 	.word	0x0800129f
 8001174:	08001571 	.word	0x08001571
 8001178:	080012b7 	.word	0x080012b7
            case 1: /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001182:	3b30      	subs	r3, #48	; 0x30
 8001184:	b2db      	uxtb	r3, r3
 8001186:	461a      	mov	r2, r3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001196:	4413      	add	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3b30      	subs	r3, #48	; 0x30
 800119c:	b2da      	uxtb	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80011aa:	3b30      	subs	r3, #48	; 0x30
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80011be:	4413      	add	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	3b30      	subs	r3, #48	; 0x30
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80011d2:	3b30      	subs	r3, #48	; 0x30
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80011e6:	4413      	add	r3, r2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	3b30      	subs	r3, #48	; 0x30
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80011f4:	e1c9      	b.n	800158a <prv_parse_term+0x54e>
            case 2:                                               /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh); /* Parse latitude */
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fed0 	bl	8000f9c <prv_parse_lat_long>
 80011fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001200:	eef0 7a60 	vmov.f32	s15, s1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800120a:	e1be      	b.n	800158a <prv_parse_term+0x54e>
            case 3: /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001212:	2b53      	cmp	r3, #83	; 0x53
 8001214:	d005      	beq.n	8001222 <prv_parse_term+0x1e6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800121c:	2b73      	cmp	r3, #115	; 0x73
 800121e:	f040 81a9 	bne.w	8001574 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001228:	4690      	mov	r8, r2
 800122a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8001234:	e19e      	b.n	8001574 <prv_parse_term+0x538>
            case 4:                                                /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh); /* Parse longitude */
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff feb0 	bl	8000f9c <prv_parse_lat_long>
 800123c:	eeb0 7a40 	vmov.f32	s14, s0
 8001240:	eef0 7a60 	vmov.f32	s15, s1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800124a:	e19e      	b.n	800158a <prv_parse_term+0x54e>
            case 5: /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001252:	2b57      	cmp	r3, #87	; 0x57
 8001254:	d005      	beq.n	8001262 <prv_parse_term+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800125c:	2b77      	cmp	r3, #119	; 0x77
 800125e:	f040 818b 	bne.w	8001578 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001268:	4614      	mov	r4, r2
 800126a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8001274:	e180      	b.n	8001578 <prv_parse_term+0x53c>
            case 6: /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8001276:	2100      	movs	r1, #0
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fd99 	bl	8000db0 <prv_parse_number>
 800127e:	4603      	mov	r3, r0
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8001288:	e17f      	b.n	800158a <prv_parse_term+0x54e>
            case 7: /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800128a:	2100      	movs	r1, #0
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fd8f 	bl	8000db0 <prv_parse_number>
 8001292:	4603      	mov	r3, r0
 8001294:	b2da      	uxtb	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 800129c:	e175      	b.n	800158a <prv_parse_term+0x54e>
            case 9: /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800129e:	2100      	movs	r1, #0
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fdcf 	bl	8000e44 <prv_parse_float_number>
 80012a6:	eeb0 7a40 	vmov.f32	s14, s0
 80012aa:	eef0 7a60 	vmov.f32	s15, s1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80012b4:	e169      	b.n	800158a <prv_parse_term+0x54e>
            case 11: /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80012b6:	2100      	movs	r1, #0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fdc3 	bl	8000e44 <prv_parse_float_number>
 80012be:	eeb0 7a40 	vmov.f32	s14, s0
 80012c2:	eef0 7a60 	vmov.f32	s15, s1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80012cc:	e15d      	b.n	800158a <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) { /* Process GPGSA statement */
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80012d4:	2902      	cmp	r1, #2
 80012d6:	f040 8083 	bne.w	80013e0 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80012e0:	3b02      	subs	r3, #2
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	d860      	bhi.n	80013a8 <prv_parse_term+0x36c>
 80012e6:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <prv_parse_term+0x2b0>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	0800132d 	.word	0x0800132d
 80012f0:	080013a9 	.word	0x080013a9
 80012f4:	080013a9 	.word	0x080013a9
 80012f8:	080013a9 	.word	0x080013a9
 80012fc:	080013a9 	.word	0x080013a9
 8001300:	080013a9 	.word	0x080013a9
 8001304:	080013a9 	.word	0x080013a9
 8001308:	080013a9 	.word	0x080013a9
 800130c:	080013a9 	.word	0x080013a9
 8001310:	080013a9 	.word	0x080013a9
 8001314:	080013a9 	.word	0x080013a9
 8001318:	080013a9 	.word	0x080013a9
 800131c:	080013a9 	.word	0x080013a9
 8001320:	08001361 	.word	0x08001361
 8001324:	08001379 	.word	0x08001379
 8001328:	08001391 	.word	0x08001391
            case 2: /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 800132c:	2100      	movs	r1, #0
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fd3e 	bl	8000db0 <prv_parse_number>
 8001334:	4603      	mov	r3, r0
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800133e:	e124      	b.n	800158a <prv_parse_term+0x54e>
 8001340:	08004fa0 	.word	0x08004fa0
 8001344:	08004fa8 	.word	0x08004fa8
 8001348:	08004fb0 	.word	0x08004fb0
 800134c:	08004fb8 	.word	0x08004fb8
 8001350:	08004fc0 	.word	0x08004fc0
 8001354:	08004fc8 	.word	0x08004fc8
 8001358:	08004fd0 	.word	0x08004fd0
 800135c:	08004fd8 	.word	0x08004fd8
            case 15: /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8001360:	2100      	movs	r1, #0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd6e 	bl	8000e44 <prv_parse_float_number>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef0 7a60 	vmov.f32	s15, s1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001376:	e108      	b.n	800158a <prv_parse_term+0x54e>
            case 16: /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001378:	2100      	movs	r1, #0
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fd62 	bl	8000e44 <prv_parse_float_number>
 8001380:	eeb0 7a40 	vmov.f32	s14, s0
 8001384:	eef0 7a60 	vmov.f32	s15, s1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800138e:	e0fc      	b.n	800158a <prv_parse_term+0x54e>
            case 17: /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001390:	2100      	movs	r1, #0
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fd56 	bl	8000e44 <prv_parse_float_number>
 8001398:	eeb0 7a40 	vmov.f32	s14, s0
 800139c:	eef0 7a60 	vmov.f32	s15, s1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80013a6:	e0f0      	b.n	800158a <prv_parse_term+0x54e>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	f240 80e4 	bls.w	800157c <prv_parse_term+0x540>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80013ba:	2b0e      	cmp	r3, #14
 80013bc:	f200 80de 	bhi.w	800157c <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80013c0:	2100      	movs	r1, #0
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fcf4 	bl	8000db0 <prv_parse_number>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80013d0:	3b03      	subs	r3, #3
 80013d2:	b2d1      	uxtb	r1, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	460a      	mov	r2, r1
 80013da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 80013de:	e0cd      	b.n	800157c <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) { /* Process GPGSV statement */
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80013e6:	2903      	cmp	r1, #3
 80013e8:	d11b      	bne.n	8001422 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d002      	beq.n	80013fa <prv_parse_term+0x3be>
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d00a      	beq.n	800140e <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80013f8:	e0c7      	b.n	800158a <prv_parse_term+0x54e>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80013fa:	2100      	movs	r1, #0
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fcd7 	bl	8000db0 <prv_parse_number>
 8001402:	4603      	mov	r3, r0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 800140c:	e0bd      	b.n	800158a <prv_parse_term+0x54e>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800140e:	2100      	movs	r1, #0
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fccd 	bl	8000db0 <prv_parse_number>
 8001416:	4603      	mov	r3, r0
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001420:	e0b3      	b.n	800158a <prv_parse_term+0x54e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001428:	2904      	cmp	r1, #4
 800142a:	f040 80a9 	bne.w	8001580 <prv_parse_term+0x544>
        switch (gh->p.term_num) {
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001434:	3902      	subs	r1, #2
 8001436:	2909      	cmp	r1, #9
 8001438:	f200 80a4 	bhi.w	8001584 <prv_parse_term+0x548>
 800143c:	a001      	add	r0, pc, #4	; (adr r0, 8001444 <prv_parse_term+0x408>)
 800143e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001442:	bf00      	nop
 8001444:	0800146d 	.word	0x0800146d
 8001448:	08001585 	.word	0x08001585
 800144c:	08001585 	.word	0x08001585
 8001450:	08001585 	.word	0x08001585
 8001454:	08001585 	.word	0x08001585
 8001458:	08001487 	.word	0x08001487
 800145c:	0800149f 	.word	0x0800149f
 8001460:	080014b7 	.word	0x080014b7
 8001464:	08001531 	.word	0x08001531
 8001468:	08001549 	.word	0x08001549
            case 2: /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001472:	2b41      	cmp	r3, #65	; 0x41
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001484:	e081      	b.n	800158a <prv_parse_term+0x54e>
            case 7: /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001486:	2100      	movs	r1, #0
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fcdb 	bl	8000e44 <prv_parse_float_number>
 800148e:	eeb0 7a40 	vmov.f32	s14, s0
 8001492:	eef0 7a60 	vmov.f32	s15, s1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800149c:	e075      	b.n	800158a <prv_parse_term+0x54e>
            case 8: /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800149e:	2100      	movs	r1, #0
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fccf 	bl	8000e44 <prv_parse_float_number>
 80014a6:	eeb0 7a40 	vmov.f32	s14, s0
 80014aa:	eef0 7a60 	vmov.f32	s15, s1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80014b4:	e069      	b.n	800158a <prv_parse_term+0x54e>
            case 9: /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014bc:	3b30      	subs	r3, #48	; 0x30
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80014d0:	4413      	add	r3, r2
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3b30      	subs	r3, #48	; 0x30
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80014e4:	3b30      	subs	r3, #48	; 0x30
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80014f8:	4413      	add	r3, r2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3b30      	subs	r3, #48	; 0x30
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800150c:	3b30      	subs	r3, #48	; 0x30
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4413      	add	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001520:	4413      	add	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	3b30      	subs	r3, #48	; 0x30
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 800152e:	e02c      	b.n	800158a <prv_parse_term+0x54e>
            case 10: /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001530:	2100      	movs	r1, #0
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fc86 	bl	8000e44 <prv_parse_float_number>
 8001538:	eeb0 7a40 	vmov.f32	s14, s0
 800153c:	eef0 7a60 	vmov.f32	s15, s1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001546:	e020      	b.n	800158a <prv_parse_term+0x54e>
            case 11: /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 800154e:	2957      	cmp	r1, #87	; 0x57
 8001550:	d004      	beq.n	800155c <prv_parse_term+0x520>
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001558:	2977      	cmp	r1, #119	; 0x77
 800155a:	d115      	bne.n	8001588 <prv_parse_term+0x54c>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8001562:	4602      	mov	r2, r0
 8001564:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 800156e:	e00b      	b.n	8001588 <prv_parse_term+0x54c>
                break;
 8001570:	bf00      	nop
 8001572:	e00a      	b.n	800158a <prv_parse_term+0x54e>
                break;
 8001574:	bf00      	nop
 8001576:	e008      	b.n	800158a <prv_parse_term+0x54e>
                break;
 8001578:	bf00      	nop
 800157a:	e006      	b.n	800158a <prv_parse_term+0x54e>
                break;
 800157c:	bf00      	nop
 800157e:	e004      	b.n	800158a <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8001580:	bf00      	nop
 8001582:	e002      	b.n	800158a <prv_parse_term+0x54e>
                break;
 8001584:	bf00      	nop
 8001586:	e000      	b.n	800158a <prv_parse_term+0x54e>
                break;
 8001588:	bf00      	nop
    return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001596:	bf00      	nop

08001598 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80015a6:	2b2f      	cmp	r3, #47	; 0x2f
 80015a8:	d90d      	bls.n	80015c6 <prv_check_crc+0x2e>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015b0:	2b39      	cmp	r3, #57	; 0x39
 80015b2:	d808      	bhi.n	80015c6 <prv_check_crc+0x2e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015ba:	3b30      	subs	r3, #48	; 0x30
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	e026      	b.n	8001614 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80015cc:	2b60      	cmp	r3, #96	; 0x60
 80015ce:	d90d      	bls.n	80015ec <prv_check_crc+0x54>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015d6:	2b7a      	cmp	r3, #122	; 0x7a
 80015d8:	d808      	bhi.n	80015ec <prv_check_crc+0x54>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015e0:	3b57      	subs	r3, #87	; 0x57
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	e013      	b.n	8001614 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80015f2:	2b40      	cmp	r3, #64	; 0x40
 80015f4:	d90d      	bls.n	8001612 <prv_check_crc+0x7a>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015fc:	2b5a      	cmp	r3, #90	; 0x5a
 80015fe:	d808      	bhi.n	8001612 <prv_check_crc+0x7a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001606:	3b37      	subs	r3, #55	; 0x37
 8001608:	b2db      	uxtb	r3, r3
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800160e:	b25a      	sxtb	r2, r3
 8001610:	e000      	b.n	8001614 <prv_check_crc+0x7c>
 8001612:	2200      	movs	r2, #0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800161a:	2b2f      	cmp	r3, #47	; 0x2f
 800161c:	d90c      	bls.n	8001638 <prv_check_crc+0xa0>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001624:	2b39      	cmp	r3, #57	; 0x39
 8001626:	d807      	bhi.n	8001638 <prv_check_crc+0xa0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800162e:	b25b      	sxtb	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b25b      	sxtb	r3, r3
 8001636:	e028      	b.n	800168a <prv_check_crc+0xf2>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800163e:	2b60      	cmp	r3, #96	; 0x60
 8001640:	d90e      	bls.n	8001660 <prv_check_crc+0xc8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001648:	2b7a      	cmp	r3, #122	; 0x7a
 800164a:	d809      	bhi.n	8001660 <prv_check_crc+0xc8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001652:	3b57      	subs	r3, #87	; 0x57
 8001654:	b2db      	uxtb	r3, r3
 8001656:	b25b      	sxtb	r3, r3
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	b25b      	sxtb	r3, r3
 800165e:	e014      	b.n	800168a <prv_check_crc+0xf2>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d90e      	bls.n	8001688 <prv_check_crc+0xf0>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001670:	2b5a      	cmp	r3, #90	; 0x5a
 8001672:	d809      	bhi.n	8001688 <prv_check_crc+0xf0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800167a:	3b37      	subs	r3, #55	; 0x37
 800167c:	b2db      	uxtb	r3, r3
 800167e:	b25b      	sxtb	r3, r3
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	b25b      	sxtb	r3, r3
 8001686:	e000      	b.n	800168a <prv_check_crc+0xf2>
 8001688:	2300      	movs	r3, #0
 800168a:	4313      	orrs	r3, r2
 800168c:	b25b      	sxtb	r3, r3
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800168e:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;             /* They must match! */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	429a      	cmp	r2, r3
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d136      	bne.n	800172e <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800172c:	e061      	b.n	80017f2 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001734:	2b02      	cmp	r3, #2
 8001736:	d121      	bne.n	800177c <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f103 0041 	add.w	r0, r3, #65	; 0x41
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	33a1      	adds	r3, #161	; 0xa1
 8001772:	220c      	movs	r2, #12
 8001774:	4619      	mov	r1, r3
 8001776:	f002 ff7d 	bl	8004674 <memcpy>
 800177a:	e03a      	b.n	80017f2 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001782:	2b03      	cmp	r3, #3
 8001784:	d106      	bne.n	8001794 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001792:	e02e      	b.n	80017f2 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800179a:	2b04      	cmp	r3, #4
 800179c:	d129      	bne.n	80017f2 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 8001804:	22b0      	movs	r2, #176	; 0xb0
 8001806:	2100      	movs	r1, #0
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f002 ff41 	bl	8004690 <memset>
    return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 8001828:	e0ad      	b.n	8001986 <lwgps_process+0x16e>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b24      	cmp	r3, #36	; 0x24
 8001830:	d128      	bne.n	8001884 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3370      	adds	r3, #112	; 0x70
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f002 ff28 	bl	8004690 <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001846:	2b0b      	cmp	r3, #11
 8001848:	f200 8097 	bhi.w	800197a <lwgps_process+0x162>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001852:	4619      	mov	r1, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	440b      	add	r3, r1
 800185c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001866:	3301      	adds	r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001882:	e07a      	b.n	800197a <lwgps_process+0x162>
        } else if (*d == ',') {                  /* Term separator character */
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b2c      	cmp	r3, #44	; 0x2c
 800188a:	d11d      	bne.n	80018c8 <lwgps_process+0xb0>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff fbd5 	bl	800103c <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4053      	eors	r3, r2
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                       /* Start with next term */
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80018bc:	3301      	adds	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80018c6:	e058      	b.n	800197a <lwgps_process+0x162>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b2a      	cmp	r3, #42	; 0x2a
 80018ce:	d117      	bne.n	8001900 <lwgps_process+0xe8>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fbb3 	bl	800103c <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                       /* Start with next term */
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80018f4:	3301      	adds	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80018fe:	e03c      	b.n	800197a <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b0d      	cmp	r3, #13
 8001906:	d109      	bne.n	800191c <lwgps_process+0x104>
            if (prv_check_crc(gh)) { /* Check for CRC result */
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7ff fe45 	bl	8001598 <prv_check_crc>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d032      	beq.n	800197a <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff feca 	bl	80016ae <prv_copy_from_tmp_memory>
 800191a:	e02e      	b.n	800197a <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <lwgps_process+0x122>
                CRC_ADD(gh, *d); /* Add to CRC */
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4053      	eors	r3, r2
 8001932:	b2da      	uxtb	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d); /* Add character to term */
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001940:	2b0b      	cmp	r3, #11
 8001942:	d81a      	bhi.n	800197a <lwgps_process+0x162>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800194a:	4619      	mov	r1, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	440b      	add	r3, r1
 8001954:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800195e:	3301      	adds	r3, #1
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f47f af4e 	bne.w	800182a <lwgps_process+0x12>
        }
    }
    return 1;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_UART_RxCpltCallback>:
uint8_t sayac = 0;
char giden_data[22] = "";
uint8_t gelendata = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <HAL_UART_RxCpltCallback+0x68>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d127      	bne.n	80019f8 <HAL_UART_RxCpltCallback+0x60>
		if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) //son satırda mı kontrolü sağlanır.
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_UART_RxCpltCallback+0x6c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b0a      	cmp	r3, #10
 80019ae:	d010      	beq.n	80019d2 <HAL_UART_RxCpltCallback+0x3a>
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_UART_RxCpltCallback+0x70>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <HAL_UART_RxCpltCallback+0x3a>
				{
			rx_buffer[rx_index++] = rx_data;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_UART_RxCpltCallback+0x70>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	b2d1      	uxtb	r1, r2
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_UART_RxCpltCallback+0x70>)
 80019c4:	7011      	strb	r1, [r2, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_UART_RxCpltCallback+0x6c>)
 80019ca:	7819      	ldrb	r1, [r3, #0]
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_UART_RxCpltCallback+0x74>)
 80019ce:	5499      	strb	r1, [r3, r2]
 80019d0:	e00d      	b.n	80019ee <HAL_UART_RxCpltCallback+0x56>

		} else {
			lwgps_process(&gps, rx_buffer, rx_index + 1);
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_UART_RxCpltCallback+0x70>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	461a      	mov	r2, r3
 80019da:	490c      	ldr	r1, [pc, #48]	; (8001a0c <HAL_UART_RxCpltCallback+0x74>)
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <HAL_UART_RxCpltCallback+0x78>)
 80019de:	f7ff ff1b 	bl	8001818 <lwgps_process>

			rx_index = 0;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_UART_RxCpltCallback+0x70>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_UART_RxCpltCallback+0x6c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	4904      	ldr	r1, [pc, #16]	; (8001a04 <HAL_UART_RxCpltCallback+0x6c>)
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <HAL_UART_RxCpltCallback+0x68>)
 80019f4:	f001 fe7b 	bl	80036ee <HAL_UART_Receive_IT>
	}
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000008c 	.word	0x2000008c
 8001a04:	20000249 	.word	0x20000249
 8001a08:	20000248 	.word	0x20000248
 8001a0c:	200001c8 	.word	0x200001c8
 8001a10:	20000118 	.word	0x20000118

08001a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a18:	f000 fb18 	bl	800204c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1c:	f000 f848 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f000 f908 	bl	8001c34 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a24:	f000 f8dc 	bl	8001be0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001a28:	f000 f8b0 	bl	8001b8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	lwgps_init(&gps);
 8001a2c:	4818      	ldr	r0, [pc, #96]	; (8001a90 <main+0x7c>)
 8001a2e:	f7ff fee5 	bl	80017fc <lwgps_init>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	4917      	ldr	r1, [pc, #92]	; (8001a94 <main+0x80>)
 8001a36:	4818      	ldr	r0, [pc, #96]	; (8001a98 <main+0x84>)
 8001a38:	f001 fe59 	bl	80036ee <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		sayac = sayac+1;
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <main+0x88>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <main+0x88>)
 8001a46:	701a      	strb	r2, [r3, #0]
				if(sayac==10){
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <main+0x88>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b0a      	cmp	r3, #10
 8001a4e:	d102      	bne.n	8001a56 <main+0x42>
					sayac = 0 ;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <main+0x88>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
				}
				sprintf(giden_data ,"Data : %d /n",gps.latitude
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <main+0x7c>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	4910      	ldr	r1, [pc, #64]	; (8001aa0 <main+0x8c>)
 8001a5e:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <main+0x90>)
 8001a60:	f002 fe1e 	bl	80046a0 <siprintf>
						);
				HAL_UART_Transmit(&huart3,(uint8_t*)giden_data,strlen(giden_data),100);
 8001a64:	480f      	ldr	r0, [pc, #60]	; (8001aa4 <main+0x90>)
 8001a66:	f7fe fbd3 	bl	8000210 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <main+0x90>)
 8001a72:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <main+0x94>)
 8001a74:	f001 fd07 	bl	8003486 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, &gelendata, 8,100);
 8001a78:	2364      	movs	r3, #100	; 0x64
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	490b      	ldr	r1, [pc, #44]	; (8001aac <main+0x98>)
 8001a7e:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <main+0x94>)
 8001a80:	f001 fd93 	bl	80035aa <HAL_UART_Receive>
				HAL_Delay(1000);
 8001a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a88:	f000 fb52 	bl	8002130 <HAL_Delay>
	while (1) {
 8001a8c:	e7d6      	b.n	8001a3c <main+0x28>
 8001a8e:	bf00      	nop
 8001a90:	20000118 	.word	0x20000118
 8001a94:	20000249 	.word	0x20000249
 8001a98:	2000008c 	.word	0x2000008c
 8001a9c:	2000024a 	.word	0x2000024a
 8001aa0:	08004fe0 	.word	0x08004fe0
 8001aa4:	2000024c 	.word	0x2000024c
 8001aa8:	200000d0 	.word	0x200000d0
 8001aac:	20000262 	.word	0x20000262

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b094      	sub	sp, #80	; 0x50
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	2234      	movs	r2, #52	; 0x34
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fde6 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <SystemClock_Config+0xd4>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <SystemClock_Config+0xd4>)
 8001ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <SystemClock_Config+0xd4>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001af0:	2300      	movs	r3, #0
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <SystemClock_Config+0xd8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <SystemClock_Config+0xd8>)
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <SystemClock_Config+0xd8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b14:	2301      	movs	r3, #1
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b18:	2310      	movs	r3, #16
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b24:	2310      	movs	r3, #16
 8001b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 f9b6 	bl	8002eb0 <HAL_RCC_OscConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b4a:	f000 f8f1 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4e:	230f      	movs	r3, #15
 8001b50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b52:	2302      	movs	r3, #2
 8001b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fe56 	bl	800281c <HAL_RCC_ClockConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b76:	f000 f8db 	bl	8001d30 <Error_Handler>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3750      	adds	r7, #80	; 0x50
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000

08001b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_USART1_UART_Init+0x50>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001b98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bc4:	f001 fc12 	bl	80033ec <HAL_UART_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bce:	f000 f8af 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000008c 	.word	0x2000008c
 8001bdc:	40011000 	.word	0x40011000

08001be0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <MX_USART3_UART_Init+0x50>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001bec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c18:	f001 fbe8 	bl	80033ec <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c22:	f000 f885 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200000d0 	.word	0x200000d0
 8001c30:	40004800 	.word	0x40004800

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <MX_GPIO_Init+0xf0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	481a      	ldr	r0, [pc, #104]	; (8001d28 <MX_GPIO_Init+0xf4>)
 8001cc0:	f000 fd92 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4814      	ldr	r0, [pc, #80]	; (8001d2c <MX_GPIO_Init+0xf8>)
 8001cdc:	f000 fbf0 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480b      	ldr	r0, [pc, #44]	; (8001d28 <MX_GPIO_Init+0xf4>)
 8001cfc:	f000 fbe0 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d00:	2320      	movs	r3, #32
 8001d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4804      	ldr	r0, [pc, #16]	; (8001d28 <MX_GPIO_Init+0xf4>)
 8001d18:	f000 fbd2 	bl	80024c0 <HAL_GPIO_Init>

}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	; 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020800 	.word	0x40020800

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>
	...

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_MspInit+0x4c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d7a:	2007      	movs	r0, #7
 8001d7c:	f000 facc 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a4a      	ldr	r2, [pc, #296]	; (8001ed4 <HAL_UART_MspInit+0x148>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d135      	bne.n	8001e1a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	4b42      	ldr	r3, [pc, #264]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a41      	ldr	r2, [pc, #260]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001de6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df8:	2307      	movs	r3, #7
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4836      	ldr	r0, [pc, #216]	; (8001edc <HAL_UART_MspInit+0x150>)
 8001e04:	f000 fb5c 	bl	80024c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2025      	movs	r0, #37	; 0x25
 8001e0e:	f000 fa8e 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e12:	2025      	movs	r0, #37	; 0x25
 8001e14:	f000 faa7 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e18:	e057      	b.n	8001eca <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a30      	ldr	r2, [pc, #192]	; (8001ee0 <HAL_UART_MspInit+0x154>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d152      	bne.n	8001eca <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_UART_MspInit+0x14c>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e88:	2307      	movs	r3, #7
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <HAL_UART_MspInit+0x158>)
 8001e94:	f000 fb14 	bl	80024c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eaa:	2307      	movs	r3, #7
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001eb6:	f000 fb03 	bl	80024c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2027      	movs	r0, #39	; 0x27
 8001ec0:	f000 fa35 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ec4:	2027      	movs	r0, #39	; 0x27
 8001ec6:	f000 fa4e 	bl	8002366 <HAL_NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3730      	adds	r7, #48	; 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40004800 	.word	0x40004800
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020400 	.word	0x40020400

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f8da 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <USART1_IRQHandler+0x10>)
 8001f46:	f001 fc03 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000008c 	.word	0x2000008c

08001f54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <USART3_IRQHandler+0x10>)
 8001f5a:	f001 fbf9 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200000d0 	.word	0x200000d0

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f002 fb42 	bl	8004620 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20020000 	.word	0x20020000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	20000264 	.word	0x20000264
 8001fd0:	20000280 	.word	0x20000280

08001fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <SystemInit+0x20>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <SystemInit+0x20>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ffc:	480d      	ldr	r0, [pc, #52]	; (8002034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ffe:	490e      	ldr	r1, [pc, #56]	; (8002038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002014:	4c0b      	ldr	r4, [pc, #44]	; (8002044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002022:	f7ff ffd7 	bl	8001fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f002 fb01 	bl	800462c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7ff fcf3 	bl	8001a14 <main>
  bx  lr    
 800202e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800203c:	0800504c 	.word	0x0800504c
  ldr r2, =_sbss
 8002040:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002044:	2000027c 	.word	0x2000027c

08002048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <HAL_Init+0x40>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_Init+0x40>)
 8002062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_Init+0x40>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f000 f94f 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f808 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7ff fe5c 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f967 	bl	8002382 <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f92f 	bl	800232e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000008 	.word	0x20000008
 8002114:	20000268 	.word	0x20000268

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000268 	.word	0x20000268

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff ffee 	bl	8002118 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffde 	bl	8002118 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000008 	.word	0x20000008

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db0b      	blt.n	8002206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	4907      	ldr	r1, [pc, #28]	; (8002214 <__NVIC_EnableIRQ+0x38>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2001      	movs	r0, #1
 80021fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	; (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff29 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff3e 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff8e 	bl	800226c <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5d 	bl	8002218 <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff31 	bl	80021dc <__NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffa2 	bl	80022d4 <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff feb6 	bl	8002118 <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d008      	beq.n	80023cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e052      	b.n	8002472 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0216 	bic.w	r2, r2, #22
 80023da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <HAL_DMA_Abort+0x62>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0208 	bic.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241c:	e013      	b.n	8002446 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800241e:	f7ff fe7b 	bl	8002118 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b05      	cmp	r3, #5
 800242a:	d90c      	bls.n	8002446 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2203      	movs	r2, #3
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e015      	b.n	8002472 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1e4      	bne.n	800241e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	223f      	movs	r2, #63	; 0x3f
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d004      	beq.n	8002498 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e00c      	b.n	80024b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2205      	movs	r2, #5
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e165      	b.n	80027a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8154 	bne.w	80027a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	2b02      	cmp	r3, #2
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d017      	beq.n	80025b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80ae 	beq.w	80027a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <HAL_GPIO_Init+0x300>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a5c      	ldr	r2, [pc, #368]	; (80027c0 <HAL_GPIO_Init+0x300>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <HAL_GPIO_Init+0x300>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002662:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4f      	ldr	r2, [pc, #316]	; (80027c8 <HAL_GPIO_Init+0x308>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x21a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_GPIO_Init+0x30c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x216>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4d      	ldr	r2, [pc, #308]	; (80027d0 <HAL_GPIO_Init+0x310>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x212>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <HAL_GPIO_Init+0x314>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x20e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	; (80027d8 <HAL_GPIO_Init+0x318>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x20a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4a      	ldr	r2, [pc, #296]	; (80027dc <HAL_GPIO_Init+0x31c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x206>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a49      	ldr	r2, [pc, #292]	; (80027e0 <HAL_GPIO_Init+0x320>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x202>
 80026be:	2306      	movs	r3, #6
 80026c0:	e00c      	b.n	80026dc <HAL_GPIO_Init+0x21c>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00a      	b.n	80026dc <HAL_GPIO_Init+0x21c>
 80026c6:	2305      	movs	r3, #5
 80026c8:	e008      	b.n	80026dc <HAL_GPIO_Init+0x21c>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x21c>
 80026ce:	2303      	movs	r3, #3
 80026d0:	e004      	b.n	80026dc <HAL_GPIO_Init+0x21c>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_Init+0x21c>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x21c>
 80026da:	2300      	movs	r3, #0
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f002 0203 	and.w	r2, r2, #3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4093      	lsls	r3, r2
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026ec:	4935      	ldr	r1, [pc, #212]	; (80027c4 <HAL_GPIO_Init+0x304>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <HAL_GPIO_Init+0x324>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a31      	ldr	r2, [pc, #196]	; (80027e4 <HAL_GPIO_Init+0x324>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <HAL_GPIO_Init+0x324>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <HAL_GPIO_Init+0x324>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274e:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_GPIO_Init+0x324>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_GPIO_Init+0x324>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <HAL_GPIO_Init+0x324>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279c:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_GPIO_Init+0x324>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3301      	adds	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	f67f ae96 	bls.w	80024dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40021400 	.word	0x40021400
 80027e0:	40021800 	.word	0x40021800
 80027e4:	40013c00 	.word	0x40013c00

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0cc      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90c      	bls.n	8002858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d044      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d119      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e067      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4934      	ldr	r1, [pc, #208]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7ff fc04 	bl	8002118 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7ff fc00 	bl	8002118 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e04f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20c      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f855 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490a      	ldr	r1, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fb64 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08004ff0 	.word	0x08004ff0
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000000 	.word	0x20000000

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff0 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0a9b      	lsrs	r3, r3, #10
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08005000 	.word	0x08005000

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	f7ff ffdc 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4903      	ldr	r1, [pc, #12]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	08005000 	.word	0x08005000

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a54:	b0ae      	sub	sp, #184	; 0xb8
 8002a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a76:	4bcb      	ldr	r3, [pc, #812]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	f200 8206 	bhi.w	8002e90 <HAL_RCC_GetSysClockFreq+0x440>
 8002a84:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002e91 	.word	0x08002e91
 8002a94:	08002e91 	.word	0x08002e91
 8002a98:	08002e91 	.word	0x08002e91
 8002a9c:	08002ac9 	.word	0x08002ac9
 8002aa0:	08002e91 	.word	0x08002e91
 8002aa4:	08002e91 	.word	0x08002e91
 8002aa8:	08002e91 	.word	0x08002e91
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002e91 	.word	0x08002e91
 8002ab4:	08002e91 	.word	0x08002e91
 8002ab8:	08002e91 	.word	0x08002e91
 8002abc:	08002cc1 	.word	0x08002cc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4bb9      	ldr	r3, [pc, #740]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ac6:	e1e7      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac8:	4bb8      	ldr	r3, [pc, #736]	; (8002dac <HAL_RCC_GetSysClockFreq+0x35c>)
 8002aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ace:	e1e3      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4bb4      	ldr	r3, [pc, #720]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002adc:	4bb1      	ldr	r3, [pc, #708]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d071      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae8:	4bae      	ldr	r3, [pc, #696]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002af4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4621      	mov	r1, r4
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	6439      	str	r1, [r7, #64]	; 0x40
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	647b      	str	r3, [r7, #68]	; 0x44
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b40:	4649      	mov	r1, r9
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4641      	mov	r1, r8
 8002b50:	1a51      	subs	r1, r2, r1
 8002b52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b54:	4649      	mov	r1, r9
 8002b56:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b68:	4649      	mov	r1, r9
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4641      	mov	r1, r8
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
 8002b82:	462b      	mov	r3, r5
 8002b84:	460a      	mov	r2, r1
 8002b86:	eb42 0303 	adc.w	r3, r2, r3
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b98:	4629      	mov	r1, r5
 8002b9a:	024b      	lsls	r3, r1, #9
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	024a      	lsls	r2, r1, #9
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bbc:	f7fd ff76 	bl	8000aac <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bca:	e067      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bcc:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bd8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002be6:	2300      	movs	r3, #0
 8002be8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002bee:	4622      	mov	r2, r4
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	f04f 0000 	mov.w	r0, #0
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	0159      	lsls	r1, r3, #5
 8002bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c00:	0150      	lsls	r0, r2, #5
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4621      	mov	r1, r4
 8002c08:	1a51      	subs	r1, r2, r1
 8002c0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c20:	4649      	mov	r1, r9
 8002c22:	018b      	lsls	r3, r1, #6
 8002c24:	4641      	mov	r1, r8
 8002c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	018a      	lsls	r2, r1, #6
 8002c2e:	4641      	mov	r1, r8
 8002c30:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c34:	4649      	mov	r1, r9
 8002c36:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c4e:	4692      	mov	sl, r2
 8002c50:	469b      	mov	fp, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	eb1a 0303 	adds.w	r3, sl, r3
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c6e:	4629      	mov	r1, r5
 8002c70:	028b      	lsls	r3, r1, #10
 8002c72:	4621      	mov	r1, r4
 8002c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c78:	4621      	mov	r1, r4
 8002c7a:	028a      	lsls	r2, r1, #10
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c84:	2200      	movs	r2, #0
 8002c86:	673b      	str	r3, [r7, #112]	; 0x70
 8002c88:	677a      	str	r2, [r7, #116]	; 0x74
 8002c8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c8e:	f7fd ff0d 	bl	8000aac <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4613      	mov	r3, r2
 8002c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c9c:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cbe:	e0eb      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4b38      	ldr	r3, [pc, #224]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d06b      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	2200      	movs	r2, #0
 8002ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ce2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cea:	663b      	str	r3, [r7, #96]	; 0x60
 8002cec:	2300      	movs	r3, #0
 8002cee:	667b      	str	r3, [r7, #100]	; 0x64
 8002cf0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	462b      	mov	r3, r5
 8002cf8:	f04f 0000 	mov.w	r0, #0
 8002cfc:	f04f 0100 	mov.w	r1, #0
 8002d00:	0159      	lsls	r1, r3, #5
 8002d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d06:	0150      	lsls	r0, r2, #5
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	1a51      	subs	r1, r2, r1
 8002d10:	61b9      	str	r1, [r7, #24]
 8002d12:	4629      	mov	r1, r5
 8002d14:	eb63 0301 	sbc.w	r3, r3, r1
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d26:	4659      	mov	r1, fp
 8002d28:	018b      	lsls	r3, r1, #6
 8002d2a:	4651      	mov	r1, sl
 8002d2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d30:	4651      	mov	r1, sl
 8002d32:	018a      	lsls	r2, r1, #6
 8002d34:	4651      	mov	r1, sl
 8002d36:	ebb2 0801 	subs.w	r8, r2, r1
 8002d3a:	4659      	mov	r1, fp
 8002d3c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d54:	4690      	mov	r8, r2
 8002d56:	4699      	mov	r9, r3
 8002d58:	4623      	mov	r3, r4
 8002d5a:	eb18 0303 	adds.w	r3, r8, r3
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	462b      	mov	r3, r5
 8002d62:	eb49 0303 	adc.w	r3, r9, r3
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d74:	4629      	mov	r1, r5
 8002d76:	024b      	lsls	r3, r1, #9
 8002d78:	4621      	mov	r1, r4
 8002d7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d7e:	4621      	mov	r1, r4
 8002d80:	024a      	lsls	r2, r1, #9
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d8e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d94:	f7fd fe8a 	bl	8000aac <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da2:	e065      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x420>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	2200      	movs	r2, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	4611      	mov	r1, r2
 8002dbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc0:	653b      	str	r3, [r7, #80]	; 0x50
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002dca:	4642      	mov	r2, r8
 8002dcc:	464b      	mov	r3, r9
 8002dce:	f04f 0000 	mov.w	r0, #0
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	0159      	lsls	r1, r3, #5
 8002dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ddc:	0150      	lsls	r0, r2, #5
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4641      	mov	r1, r8
 8002de4:	1a51      	subs	r1, r2, r1
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4649      	mov	r1, r9
 8002dea:	eb63 0301 	sbc.w	r3, r3, r1
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	018b      	lsls	r3, r1, #6
 8002e00:	4651      	mov	r1, sl
 8002e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e06:	4651      	mov	r1, sl
 8002e08:	018a      	lsls	r2, r1, #6
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	1a54      	subs	r4, r2, r1
 8002e0e:	4659      	mov	r1, fp
 8002e10:	eb63 0501 	sbc.w	r5, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	00eb      	lsls	r3, r5, #3
 8002e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	464b      	mov	r3, r9
 8002e30:	eb45 0303 	adc.w	r3, r5, r3
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e42:	4629      	mov	r1, r5
 8002e44:	028b      	lsls	r3, r1, #10
 8002e46:	4621      	mov	r1, r4
 8002e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	028a      	lsls	r2, r1, #10
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e58:	2200      	movs	r2, #0
 8002e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e62:	f7fd fe23 	bl	8000aac <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	0f1b      	lsrs	r3, r3, #28
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e8e:	e003      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	37b8      	adds	r7, #184	; 0xb8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400

08002eb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e28d      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8083 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ed0:	4b94      	ldr	r3, [pc, #592]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d019      	beq.n	8002f10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002edc:	4b91      	ldr	r3, [pc, #580]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ee8:	4b8e      	ldr	r3, [pc, #568]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef4:	d00c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b8b      	ldr	r3, [pc, #556]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d112      	bne.n	8002f28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f02:	4b88      	ldr	r3, [pc, #544]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	4b84      	ldr	r3, [pc, #528]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d05b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x124>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d157      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e25a      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x90>
 8002f32:	4b7c      	ldr	r3, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7b      	ldr	r2, [pc, #492]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xcc>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xb4>
 8002f4a:	4b76      	ldr	r3, [pc, #472]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a75      	ldr	r2, [pc, #468]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b73      	ldr	r3, [pc, #460]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a72      	ldr	r2, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xcc>
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6e      	ldr	r2, [pc, #440]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6b      	ldr	r2, [pc, #428]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7ff f8c8 	bl	8002118 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff f8c4 	bl	8002118 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e21f      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b61      	ldr	r3, [pc, #388]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xdc>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7ff f8b4 	bl	8002118 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff f8b0 	bl	8002118 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e20b      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x104>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d06f      	beq.n	80030c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fe2:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d017      	beq.n	800301e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fee:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d105      	bne.n	8003006 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b47      	ldr	r3, [pc, #284]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b44      	ldr	r3, [pc, #272]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x186>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1d3      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4937      	ldr	r1, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b34      	ldr	r3, [pc, #208]	; (8003128 <HAL_RCC_OscConfig+0x278>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7ff f85d 	bl	8002118 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003062:	f7ff f859 	bl	8002118 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1b4      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4925      	ldr	r1, [pc, #148]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_OscConfig+0x278>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7ff f83c 	bl	8002118 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a4:	f7ff f838 	bl	8002118 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e193      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d036      	beq.n	800313c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7ff f81c 	bl	8002118 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e4:	f7ff f818 	bl	8002118 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e173      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_OscConfig+0x274>)
 80030f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x234>
 8003102:	e01b      	b.n	800313c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_OscConfig+0x27c>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7ff f805 	bl	8002118 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	e00e      	b.n	8003130 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003112:	f7ff f801 	bl	8002118 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d907      	bls.n	8003130 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e15c      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
 8003124:	40023800 	.word	0x40023800
 8003128:	42470000 	.word	0x42470000
 800312c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b8a      	ldr	r3, [pc, #552]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ea      	bne.n	8003112 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8097 	beq.w	8003278 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b83      	ldr	r3, [pc, #524]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b7f      	ldr	r3, [pc, #508]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a7e      	ldr	r2, [pc, #504]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b7c      	ldr	r3, [pc, #496]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b79      	ldr	r3, [pc, #484]	; (8003360 <HAL_RCC_OscConfig+0x4b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x4b0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a75      	ldr	r2, [pc, #468]	; (8003360 <HAL_RCC_OscConfig+0x4b0>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe ffc1 	bl	8002118 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7fe ffbd 	bl	8002118 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e118      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <HAL_RCC_OscConfig+0x4b0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x31e>
 80031c0:	4b66      	ldr	r3, [pc, #408]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a65      	ldr	r2, [pc, #404]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	e01c      	b.n	8003208 <HAL_RCC_OscConfig+0x358>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x340>
 80031d6:	4b61      	ldr	r3, [pc, #388]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a60      	ldr	r2, [pc, #384]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
 80031e2:	4b5e      	ldr	r3, [pc, #376]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a5d      	ldr	r2, [pc, #372]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0x358>
 80031f0:	4b5a      	ldr	r3, [pc, #360]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a59      	ldr	r2, [pc, #356]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	4b57      	ldr	r3, [pc, #348]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a56      	ldr	r2, [pc, #344]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003202:	f023 0304 	bic.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe ff82 	bl	8002118 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe ff7e 	bl	8002118 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0d7      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	4b4b      	ldr	r3, [pc, #300]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ee      	beq.n	8003218 <HAL_RCC_OscConfig+0x368>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe ff6c 	bl	8002118 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe ff68 	bl	8002118 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0c1      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	4b40      	ldr	r3, [pc, #256]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ee      	bne.n	8003244 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b3b      	ldr	r3, [pc, #236]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	4a3a      	ldr	r2, [pc, #232]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80ad 	beq.w	80033dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003282:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b08      	cmp	r3, #8
 800328c:	d060      	beq.n	8003350 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d145      	bne.n	8003322 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b33      	ldr	r3, [pc, #204]	; (8003364 <HAL_RCC_OscConfig+0x4b4>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe ff3c 	bl	8002118 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe ff38 	bl	8002118 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e093      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	071b      	lsls	r3, r3, #28
 80032ee:	491b      	ldr	r1, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_RCC_OscConfig+0x4b4>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe ff0d 	bl	8002118 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe ff09 	bl	8002118 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e064      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x452>
 8003320:	e05c      	b.n	80033dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_RCC_OscConfig+0x4b4>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fef6 	bl	8002118 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003330:	f7fe fef2 	bl	8002118 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e04d      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x480>
 800334e:	e045      	b.n	80033dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e040      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
 800335c:	40023800 	.word	0x40023800
 8003360:	40007000 	.word	0x40007000
 8003364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003368:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <HAL_RCC_OscConfig+0x538>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d030      	beq.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d129      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d122      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800339e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d119      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	3b01      	subs	r3, #1
 80033b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d10f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800

080033ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e03f      	b.n	800347e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fe fcba 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800342e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fe81 	bl	8004138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b08a      	sub	sp, #40	; 0x28
 800348a:	af02      	add	r7, sp, #8
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d17c      	bne.n	80035a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_UART_Transmit+0x2c>
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e075      	b.n	80035a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Transmit+0x3e>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e06e      	b.n	80035a2 <HAL_UART_Transmit+0x11c>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2221      	movs	r2, #33	; 0x21
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034da:	f7fe fe1d 	bl	8002118 <HAL_GetTick>
 80034de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f4:	d108      	bne.n	8003508 <HAL_UART_Transmit+0x82>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e003      	b.n	8003510 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003518:	e02a      	b.n	8003570 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fbc1 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e036      	b.n	80035a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003548:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	3302      	adds	r3, #2
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	e007      	b.n	8003562 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3301      	adds	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1cf      	bne.n	800351a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fb91 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e006      	b.n	80035a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b08a      	sub	sp, #40	; 0x28
 80035ae:	af02      	add	r7, sp, #8
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	f040 808c 	bne.w	80036e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_UART_Receive+0x2e>
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e084      	b.n	80036e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Receive+0x40>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e07d      	b.n	80036e6 <HAL_UART_Receive+0x13c>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2222      	movs	r2, #34	; 0x22
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003606:	f7fe fd87 	bl	8002118 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	88fa      	ldrh	r2, [r7, #6]
 8003616:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003620:	d108      	bne.n	8003634 <HAL_UART_Receive+0x8a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e003      	b.n	800363c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003644:	e043      	b.n	80036ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	2120      	movs	r1, #32
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fb2b 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e042      	b.n	80036e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	b29b      	uxth	r3, r3
 800366e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003672:	b29a      	uxth	r2, r3
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	3302      	adds	r3, #2
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	e01f      	b.n	80036c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d007      	beq.n	800369a <HAL_UART_Receive+0xf0>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_UART_Receive+0xfe>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e008      	b.n	80036ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1b6      	bne.n	8003646 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b20      	cmp	r3, #32
 8003706:	d11d      	bne.n	8003744 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_UART_Receive_IT+0x26>
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e016      	b.n	8003746 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_UART_Receive_IT+0x38>
 8003722:	2302      	movs	r3, #2
 8003724:	e00f      	b.n	8003746 <HAL_UART_Receive_IT+0x58>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	461a      	mov	r2, r3
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb24 	bl	8003d88 <UART_Start_Receive_IT>
 8003740:	4603      	mov	r3, r0
 8003742:	e000      	b.n	8003746 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b0ba      	sub	sp, #232	; 0xe8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800378e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_UART_IRQHandler+0x66>
 80037a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fc07 	bl	8003fc2 <UART_Receive_IT>
      return;
 80037b4:	e256      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80de 	beq.w	800397c <HAL_UART_IRQHandler+0x22c>
 80037c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80d1 	beq.w	800397c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_UART_IRQHandler+0xae>
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_UART_IRQHandler+0xd2>
 800380a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0202 	orr.w	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_UART_IRQHandler+0xf6>
 800382e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d011      	beq.n	8003876 <HAL_UART_IRQHandler+0x126>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800385e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f043 0208 	orr.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 81ed 	beq.w	8003c5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_UART_IRQHandler+0x14e>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fb92 	bl	8003fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_UART_IRQHandler+0x17a>
 80038c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04f      	beq.n	800396a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa9a 	bl	8003e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d141      	bne.n	8003962 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800390a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800390e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1d9      	bne.n	80038de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	2b00      	cmp	r3, #0
 8003930:	d013      	beq.n	800395a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	4a7d      	ldr	r2, [pc, #500]	; (8003b2c <HAL_UART_IRQHandler+0x3dc>)
 8003938:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fd9b 	bl	800247a <HAL_DMA_Abort_IT>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003954:	4610      	mov	r0, r2
 8003956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	e00e      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f990 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	e00a      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f98c 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	e006      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f988 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003976:	e170      	b.n	8003c5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	bf00      	nop
    return;
 800397a:	e16e      	b.n	8003c5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 814a 	bne.w	8003c1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8143 	beq.w	8003c1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 813c 	beq.w	8003c1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	f040 80b4 	bne.w	8003b30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8140 	beq.w	8003c5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039e6:	429a      	cmp	r2, r3
 80039e8:	f080 8139 	bcs.w	8003c5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fe:	f000 8088 	beq.w	8003b12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1d9      	bne.n	8003a02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e1      	bne.n	8003a4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e3      	bne.n	8003a8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003af4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003af6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003afa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e3      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fc44 	bl	800239a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8b6 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b28:	e099      	b.n	8003c5e <HAL_UART_IRQHandler+0x50e>
 8003b2a:	bf00      	nop
 8003b2c:	08003ecb 	.word	0x08003ecb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 808b 	beq.w	8003c62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8086 	beq.w	8003c62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bb2:	633a      	str	r2, [r7, #48]	; 0x30
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e3      	bne.n	8003b8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0310 	bic.w	r3, r3, #16
 8003bea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bf8:	61fa      	str	r2, [r7, #28]
 8003bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	69b9      	ldr	r1, [r7, #24]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	617b      	str	r3, [r7, #20]
   return(result);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e3      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f83e 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c18:	e023      	b.n	8003c62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_UART_IRQHandler+0x4ea>
 8003c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f95d 	bl	8003ef2 <UART_Transmit_IT>
    return;
 8003c38:	e014      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00e      	beq.n	8003c64 <HAL_UART_IRQHandler+0x514>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f99d 	bl	8003f92 <UART_EndTransmit_IT>
    return;
 8003c58:	e004      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
    return;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
      return;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
      return;
 8003c62:	bf00      	nop
  }
}
 8003c64:	37e8      	adds	r7, #232	; 0xe8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop

08003c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b090      	sub	sp, #64	; 0x40
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbc:	e050      	b.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d04c      	beq.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ccc:	f7fe fa24 	bl	8002118 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d241      	bcs.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e5      	bne.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3314      	adds	r3, #20
 8003d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d30:	623a      	str	r2, [r7, #32]
 8003d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	69f9      	ldr	r1, [r7, #28]
 8003d36:	6a3a      	ldr	r2, [r7, #32]
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e00f      	b.n	8003d80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d09f      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3740      	adds	r7, #64	; 0x40
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2222      	movs	r2, #34	; 0x22
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0220 	orr.w	r2, r2, #32
 8003df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b095      	sub	sp, #84	; 0x54
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e2c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3314      	adds	r3, #20
 8003e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d119      	bne.n	8003eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	647b      	str	r3, [r7, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e9c:	61ba      	str	r2, [r7, #24]
 8003e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6979      	ldr	r1, [r7, #20]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e5      	bne.n	8003e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ebe:	bf00      	nop
 8003ec0:	3754      	adds	r7, #84	; 0x54
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fecb 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b21      	cmp	r3, #33	; 0x21
 8003f04:	d13e      	bne.n	8003f84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d114      	bne.n	8003f3a <UART_Transmit_IT+0x48>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d110      	bne.n	8003f3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	621a      	str	r2, [r3, #32]
 8003f38:	e008      	b.n	8003f4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6211      	str	r1, [r2, #32]
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe5a 	bl	8003c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08c      	sub	sp, #48	; 0x30
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b22      	cmp	r3, #34	; 0x22
 8003fd4:	f040 80ab 	bne.w	800412e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe0:	d117      	bne.n	8004012 <UART_Receive_IT+0x50>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d113      	bne.n	8004012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004000:	b29a      	uxth	r2, r3
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	1c9a      	adds	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
 8004010:	e026      	b.n	8004060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004024:	d007      	beq.n	8004036 <UART_Receive_IT+0x74>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <UART_Receive_IT+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	e008      	b.n	8004056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004050:	b2da      	uxtb	r2, r3
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29b      	uxth	r3, r3
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4619      	mov	r1, r3
 800406e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004070:	2b00      	cmp	r3, #0
 8004072:	d15a      	bne.n	800412a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0220 	bic.w	r2, r2, #32
 8004082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d135      	bne.n	8004120 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f023 0310 	bic.w	r3, r3, #16
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040da:	623a      	str	r2, [r7, #32]
 80040dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	69f9      	ldr	r1, [r7, #28]
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d10a      	bne.n	8004112 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fdbb 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
 800411e:	e002      	b.n	8004126 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fd fc39 	bl	8001998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e002      	b.n	8004130 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	3730      	adds	r7, #48	; 0x30
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800413c:	b0c0      	sub	sp, #256	; 0x100
 800413e:	af00      	add	r7, sp, #0
 8004140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	68d9      	ldr	r1, [r3, #12]
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	ea40 0301 	orr.w	r3, r0, r1
 8004160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004190:	f021 010c 	bic.w	r1, r1, #12
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800419e:	430b      	orrs	r3, r1
 80041a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b2:	6999      	ldr	r1, [r3, #24]
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	ea40 0301 	orr.w	r3, r0, r1
 80041be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b8f      	ldr	r3, [pc, #572]	; (8004404 <UART_SetConfig+0x2cc>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d005      	beq.n	80041d8 <UART_SetConfig+0xa0>
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <UART_SetConfig+0x2d0>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d104      	bne.n	80041e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe fc26 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 80041dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041e0:	e003      	b.n	80041ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041e2:	f7fe fc0d 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 80041e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f4:	f040 810c 	bne.w	8004410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	1891      	adds	r1, r2, r2
 8004210:	65b9      	str	r1, [r7, #88]	; 0x58
 8004212:	415b      	adcs	r3, r3
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800421a:	4621      	mov	r1, r4
 800421c:	eb12 0801 	adds.w	r8, r2, r1
 8004220:	4629      	mov	r1, r5
 8004222:	eb43 0901 	adc.w	r9, r3, r1
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800423a:	4690      	mov	r8, r2
 800423c:	4699      	mov	r9, r3
 800423e:	4623      	mov	r3, r4
 8004240:	eb18 0303 	adds.w	r3, r8, r3
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004248:	462b      	mov	r3, r5
 800424a:	eb49 0303 	adc.w	r3, r9, r3
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800425e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004266:	460b      	mov	r3, r1
 8004268:	18db      	adds	r3, r3, r3
 800426a:	653b      	str	r3, [r7, #80]	; 0x50
 800426c:	4613      	mov	r3, r2
 800426e:	eb42 0303 	adc.w	r3, r2, r3
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
 8004274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800427c:	f7fc fc16 	bl	8000aac <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <UART_SetConfig+0x2d4>)
 8004286:	fba3 2302 	umull	r2, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	011c      	lsls	r4, r3, #4
 800428e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800429c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042a8:	415b      	adcs	r3, r3
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042b0:	4641      	mov	r1, r8
 80042b2:	eb12 0a01 	adds.w	sl, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb43 0b01 	adc.w	fp, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d0:	4692      	mov	sl, r2
 80042d2:	469b      	mov	fp, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	eb1a 0303 	adds.w	r3, sl, r3
 80042da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042de:	464b      	mov	r3, r9
 80042e0:	eb4b 0303 	adc.w	r3, fp, r3
 80042e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042fc:	460b      	mov	r3, r1
 80042fe:	18db      	adds	r3, r3, r3
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
 8004302:	4613      	mov	r3, r2
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	647b      	str	r3, [r7, #68]	; 0x44
 800430a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800430e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004312:	f7fc fbcb 	bl	8000aac <__aeabi_uldivmod>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4611      	mov	r1, r2
 800431c:	4b3b      	ldr	r3, [pc, #236]	; (800440c <UART_SetConfig+0x2d4>)
 800431e:	fba3 2301 	umull	r2, r3, r3, r1
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2264      	movs	r2, #100	; 0x64
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	1acb      	subs	r3, r1, r3
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <UART_SetConfig+0x2d4>)
 8004334:	fba3 2302 	umull	r2, r3, r3, r2
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004340:	441c      	add	r4, r3
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800434c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	63b9      	str	r1, [r7, #56]	; 0x38
 800435c:	415b      	adcs	r3, r3
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6339      	str	r1, [r7, #48]	; 0x30
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ce:	f7fc fb6d 	bl	8000aac <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <UART_SetConfig+0x2d4>)
 80043d8:	fba3 1302 	umull	r1, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	2164      	movs	r1, #100	; 0x64
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	3332      	adds	r3, #50	; 0x32
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <UART_SetConfig+0x2d4>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	f003 0207 	and.w	r2, r3, #7
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4422      	add	r2, r4
 80043fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004400:	e105      	b.n	800460e <UART_SetConfig+0x4d6>
 8004402:	bf00      	nop
 8004404:	40011000 	.word	0x40011000
 8004408:	40011400 	.word	0x40011400
 800440c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800441a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800441e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004422:	4642      	mov	r2, r8
 8004424:	464b      	mov	r3, r9
 8004426:	1891      	adds	r1, r2, r2
 8004428:	6239      	str	r1, [r7, #32]
 800442a:	415b      	adcs	r3, r3
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004432:	4641      	mov	r1, r8
 8004434:	1854      	adds	r4, r2, r1
 8004436:	4649      	mov	r1, r9
 8004438:	eb43 0501 	adc.w	r5, r3, r1
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	00eb      	lsls	r3, r5, #3
 8004446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444a:	00e2      	lsls	r2, r4, #3
 800444c:	4614      	mov	r4, r2
 800444e:	461d      	mov	r5, r3
 8004450:	4643      	mov	r3, r8
 8004452:	18e3      	adds	r3, r4, r3
 8004454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004458:	464b      	mov	r3, r9
 800445a:	eb45 0303 	adc.w	r3, r5, r3
 800445e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800446e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800447e:	4629      	mov	r1, r5
 8004480:	008b      	lsls	r3, r1, #2
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004488:	4621      	mov	r1, r4
 800448a:	008a      	lsls	r2, r1, #2
 800448c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004490:	f7fc fb0c 	bl	8000aac <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b60      	ldr	r3, [pc, #384]	; (800461c <UART_SetConfig+0x4e4>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	61b9      	str	r1, [r7, #24]
 80044bc:	415b      	adcs	r3, r3
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6139      	str	r1, [r7, #16]
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044f8:	464b      	mov	r3, r9
 80044fa:	460a      	mov	r2, r1
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	67bb      	str	r3, [r7, #120]	; 0x78
 800450e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800451c:	4649      	mov	r1, r9
 800451e:	008b      	lsls	r3, r1, #2
 8004520:	4641      	mov	r1, r8
 8004522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004526:	4641      	mov	r1, r8
 8004528:	008a      	lsls	r2, r1, #2
 800452a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800452e:	f7fc fabd 	bl	8000aac <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <UART_SetConfig+0x4e4>)
 8004538:	fba3 1302 	umull	r1, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2164      	movs	r1, #100	; 0x64
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	3332      	adds	r3, #50	; 0x32
 800454a:	4a34      	ldr	r2, [pc, #208]	; (800461c <UART_SetConfig+0x4e4>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004556:	441c      	add	r4, r3
 8004558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455c:	2200      	movs	r2, #0
 800455e:	673b      	str	r3, [r7, #112]	; 0x70
 8004560:	677a      	str	r2, [r7, #116]	; 0x74
 8004562:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004566:	4642      	mov	r2, r8
 8004568:	464b      	mov	r3, r9
 800456a:	1891      	adds	r1, r2, r2
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	415b      	adcs	r3, r3
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004576:	4641      	mov	r1, r8
 8004578:	1851      	adds	r1, r2, r1
 800457a:	6039      	str	r1, [r7, #0]
 800457c:	4649      	mov	r1, r9
 800457e:	414b      	adcs	r3, r1
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800458e:	4659      	mov	r1, fp
 8004590:	00cb      	lsls	r3, r1, #3
 8004592:	4651      	mov	r1, sl
 8004594:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004598:	4651      	mov	r1, sl
 800459a:	00ca      	lsls	r2, r1, #3
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	4603      	mov	r3, r0
 80045a2:	4642      	mov	r2, r8
 80045a4:	189b      	adds	r3, r3, r2
 80045a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a8:	464b      	mov	r3, r9
 80045aa:	460a      	mov	r2, r1
 80045ac:	eb42 0303 	adc.w	r3, r2, r3
 80045b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	663b      	str	r3, [r7, #96]	; 0x60
 80045bc:	667a      	str	r2, [r7, #100]	; 0x64
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045ca:	4649      	mov	r1, r9
 80045cc:	008b      	lsls	r3, r1, #2
 80045ce:	4641      	mov	r1, r8
 80045d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d4:	4641      	mov	r1, r8
 80045d6:	008a      	lsls	r2, r1, #2
 80045d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045dc:	f7fc fa66 	bl	8000aac <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <UART_SetConfig+0x4e4>)
 80045e6:	fba3 1302 	umull	r1, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2164      	movs	r1, #100	; 0x64
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	3332      	adds	r3, #50	; 0x32
 80045f8:	4a08      	ldr	r2, [pc, #32]	; (800461c <UART_SetConfig+0x4e4>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4422      	add	r2, r4
 800460c:	609a      	str	r2, [r3, #8]
}
 800460e:	bf00      	nop
 8004610:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	51eb851f 	.word	0x51eb851f

08004620 <__errno>:
 8004620:	4b01      	ldr	r3, [pc, #4]	; (8004628 <__errno+0x8>)
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	2000000c 	.word	0x2000000c

0800462c <__libc_init_array>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4d0d      	ldr	r5, [pc, #52]	; (8004664 <__libc_init_array+0x38>)
 8004630:	4c0d      	ldr	r4, [pc, #52]	; (8004668 <__libc_init_array+0x3c>)
 8004632:	1b64      	subs	r4, r4, r5
 8004634:	10a4      	asrs	r4, r4, #2
 8004636:	2600      	movs	r6, #0
 8004638:	42a6      	cmp	r6, r4
 800463a:	d109      	bne.n	8004650 <__libc_init_array+0x24>
 800463c:	4d0b      	ldr	r5, [pc, #44]	; (800466c <__libc_init_array+0x40>)
 800463e:	4c0c      	ldr	r4, [pc, #48]	; (8004670 <__libc_init_array+0x44>)
 8004640:	f000 fca2 	bl	8004f88 <_init>
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	2600      	movs	r6, #0
 800464a:	42a6      	cmp	r6, r4
 800464c:	d105      	bne.n	800465a <__libc_init_array+0x2e>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	f855 3b04 	ldr.w	r3, [r5], #4
 8004654:	4798      	blx	r3
 8004656:	3601      	adds	r6, #1
 8004658:	e7ee      	b.n	8004638 <__libc_init_array+0xc>
 800465a:	f855 3b04 	ldr.w	r3, [r5], #4
 800465e:	4798      	blx	r3
 8004660:	3601      	adds	r6, #1
 8004662:	e7f2      	b.n	800464a <__libc_init_array+0x1e>
 8004664:	08005044 	.word	0x08005044
 8004668:	08005044 	.word	0x08005044
 800466c:	08005044 	.word	0x08005044
 8004670:	08005048 	.word	0x08005048

08004674 <memcpy>:
 8004674:	440a      	add	r2, r1
 8004676:	4291      	cmp	r1, r2
 8004678:	f100 33ff 	add.w	r3, r0, #4294967295
 800467c:	d100      	bne.n	8004680 <memcpy+0xc>
 800467e:	4770      	bx	lr
 8004680:	b510      	push	{r4, lr}
 8004682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800468a:	4291      	cmp	r1, r2
 800468c:	d1f9      	bne.n	8004682 <memcpy+0xe>
 800468e:	bd10      	pop	{r4, pc}

08004690 <memset>:
 8004690:	4402      	add	r2, r0
 8004692:	4603      	mov	r3, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <siprintf>:
 80046a0:	b40e      	push	{r1, r2, r3}
 80046a2:	b500      	push	{lr}
 80046a4:	b09c      	sub	sp, #112	; 0x70
 80046a6:	ab1d      	add	r3, sp, #116	; 0x74
 80046a8:	9002      	str	r0, [sp, #8]
 80046aa:	9006      	str	r0, [sp, #24]
 80046ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046b0:	4809      	ldr	r0, [pc, #36]	; (80046d8 <siprintf+0x38>)
 80046b2:	9107      	str	r1, [sp, #28]
 80046b4:	9104      	str	r1, [sp, #16]
 80046b6:	4909      	ldr	r1, [pc, #36]	; (80046dc <siprintf+0x3c>)
 80046b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046bc:	9105      	str	r1, [sp, #20]
 80046be:	6800      	ldr	r0, [r0, #0]
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	a902      	add	r1, sp, #8
 80046c4:	f000 f87c 	bl	80047c0 <_svfiprintf_r>
 80046c8:	9b02      	ldr	r3, [sp, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	b01c      	add	sp, #112	; 0x70
 80046d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046d4:	b003      	add	sp, #12
 80046d6:	4770      	bx	lr
 80046d8:	2000000c 	.word	0x2000000c
 80046dc:	ffff0208 	.word	0xffff0208

080046e0 <strncmp>:
 80046e0:	b510      	push	{r4, lr}
 80046e2:	b17a      	cbz	r2, 8004704 <strncmp+0x24>
 80046e4:	4603      	mov	r3, r0
 80046e6:	3901      	subs	r1, #1
 80046e8:	1884      	adds	r4, r0, r2
 80046ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 80046ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80046f2:	4290      	cmp	r0, r2
 80046f4:	d101      	bne.n	80046fa <strncmp+0x1a>
 80046f6:	42a3      	cmp	r3, r4
 80046f8:	d101      	bne.n	80046fe <strncmp+0x1e>
 80046fa:	1a80      	subs	r0, r0, r2
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	2800      	cmp	r0, #0
 8004700:	d1f3      	bne.n	80046ea <strncmp+0xa>
 8004702:	e7fa      	b.n	80046fa <strncmp+0x1a>
 8004704:	4610      	mov	r0, r2
 8004706:	e7f9      	b.n	80046fc <strncmp+0x1c>

08004708 <__ssputs_r>:
 8004708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	688e      	ldr	r6, [r1, #8]
 800470e:	429e      	cmp	r6, r3
 8004710:	4682      	mov	sl, r0
 8004712:	460c      	mov	r4, r1
 8004714:	4690      	mov	r8, r2
 8004716:	461f      	mov	r7, r3
 8004718:	d838      	bhi.n	800478c <__ssputs_r+0x84>
 800471a:	898a      	ldrh	r2, [r1, #12]
 800471c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004720:	d032      	beq.n	8004788 <__ssputs_r+0x80>
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	6909      	ldr	r1, [r1, #16]
 8004726:	eba5 0901 	sub.w	r9, r5, r1
 800472a:	6965      	ldr	r5, [r4, #20]
 800472c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004734:	3301      	adds	r3, #1
 8004736:	444b      	add	r3, r9
 8004738:	106d      	asrs	r5, r5, #1
 800473a:	429d      	cmp	r5, r3
 800473c:	bf38      	it	cc
 800473e:	461d      	movcc	r5, r3
 8004740:	0553      	lsls	r3, r2, #21
 8004742:	d531      	bpl.n	80047a8 <__ssputs_r+0xa0>
 8004744:	4629      	mov	r1, r5
 8004746:	f000 fb55 	bl	8004df4 <_malloc_r>
 800474a:	4606      	mov	r6, r0
 800474c:	b950      	cbnz	r0, 8004764 <__ssputs_r+0x5c>
 800474e:	230c      	movs	r3, #12
 8004750:	f8ca 3000 	str.w	r3, [sl]
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004764:	6921      	ldr	r1, [r4, #16]
 8004766:	464a      	mov	r2, r9
 8004768:	f7ff ff84 	bl	8004674 <memcpy>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	6126      	str	r6, [r4, #16]
 800477a:	6165      	str	r5, [r4, #20]
 800477c:	444e      	add	r6, r9
 800477e:	eba5 0509 	sub.w	r5, r5, r9
 8004782:	6026      	str	r6, [r4, #0]
 8004784:	60a5      	str	r5, [r4, #8]
 8004786:	463e      	mov	r6, r7
 8004788:	42be      	cmp	r6, r7
 800478a:	d900      	bls.n	800478e <__ssputs_r+0x86>
 800478c:	463e      	mov	r6, r7
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	4632      	mov	r2, r6
 8004792:	4641      	mov	r1, r8
 8004794:	f000 faa8 	bl	8004ce8 <memmove>
 8004798:	68a3      	ldr	r3, [r4, #8]
 800479a:	1b9b      	subs	r3, r3, r6
 800479c:	60a3      	str	r3, [r4, #8]
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	4433      	add	r3, r6
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	2000      	movs	r0, #0
 80047a6:	e7db      	b.n	8004760 <__ssputs_r+0x58>
 80047a8:	462a      	mov	r2, r5
 80047aa:	f000 fb97 	bl	8004edc <_realloc_r>
 80047ae:	4606      	mov	r6, r0
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d1e1      	bne.n	8004778 <__ssputs_r+0x70>
 80047b4:	6921      	ldr	r1, [r4, #16]
 80047b6:	4650      	mov	r0, sl
 80047b8:	f000 fab0 	bl	8004d1c <_free_r>
 80047bc:	e7c7      	b.n	800474e <__ssputs_r+0x46>
	...

080047c0 <_svfiprintf_r>:
 80047c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c4:	4698      	mov	r8, r3
 80047c6:	898b      	ldrh	r3, [r1, #12]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	b09d      	sub	sp, #116	; 0x74
 80047cc:	4607      	mov	r7, r0
 80047ce:	460d      	mov	r5, r1
 80047d0:	4614      	mov	r4, r2
 80047d2:	d50e      	bpl.n	80047f2 <_svfiprintf_r+0x32>
 80047d4:	690b      	ldr	r3, [r1, #16]
 80047d6:	b963      	cbnz	r3, 80047f2 <_svfiprintf_r+0x32>
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	f000 fb0b 	bl	8004df4 <_malloc_r>
 80047de:	6028      	str	r0, [r5, #0]
 80047e0:	6128      	str	r0, [r5, #16]
 80047e2:	b920      	cbnz	r0, 80047ee <_svfiprintf_r+0x2e>
 80047e4:	230c      	movs	r3, #12
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e0d1      	b.n	8004992 <_svfiprintf_r+0x1d2>
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	616b      	str	r3, [r5, #20]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9309      	str	r3, [sp, #36]	; 0x24
 80047f6:	2320      	movs	r3, #32
 80047f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004800:	2330      	movs	r3, #48	; 0x30
 8004802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049ac <_svfiprintf_r+0x1ec>
 8004806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800480a:	f04f 0901 	mov.w	r9, #1
 800480e:	4623      	mov	r3, r4
 8004810:	469a      	mov	sl, r3
 8004812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004816:	b10a      	cbz	r2, 800481c <_svfiprintf_r+0x5c>
 8004818:	2a25      	cmp	r2, #37	; 0x25
 800481a:	d1f9      	bne.n	8004810 <_svfiprintf_r+0x50>
 800481c:	ebba 0b04 	subs.w	fp, sl, r4
 8004820:	d00b      	beq.n	800483a <_svfiprintf_r+0x7a>
 8004822:	465b      	mov	r3, fp
 8004824:	4622      	mov	r2, r4
 8004826:	4629      	mov	r1, r5
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ff6d 	bl	8004708 <__ssputs_r>
 800482e:	3001      	adds	r0, #1
 8004830:	f000 80aa 	beq.w	8004988 <_svfiprintf_r+0x1c8>
 8004834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004836:	445a      	add	r2, fp
 8004838:	9209      	str	r2, [sp, #36]	; 0x24
 800483a:	f89a 3000 	ldrb.w	r3, [sl]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80a2 	beq.w	8004988 <_svfiprintf_r+0x1c8>
 8004844:	2300      	movs	r3, #0
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484e:	f10a 0a01 	add.w	sl, sl, #1
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	9307      	str	r3, [sp, #28]
 8004856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800485a:	931a      	str	r3, [sp, #104]	; 0x68
 800485c:	4654      	mov	r4, sl
 800485e:	2205      	movs	r2, #5
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	4851      	ldr	r0, [pc, #324]	; (80049ac <_svfiprintf_r+0x1ec>)
 8004866:	f7fb fcdb 	bl	8000220 <memchr>
 800486a:	9a04      	ldr	r2, [sp, #16]
 800486c:	b9d8      	cbnz	r0, 80048a6 <_svfiprintf_r+0xe6>
 800486e:	06d0      	lsls	r0, r2, #27
 8004870:	bf44      	itt	mi
 8004872:	2320      	movmi	r3, #32
 8004874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004878:	0711      	lsls	r1, r2, #28
 800487a:	bf44      	itt	mi
 800487c:	232b      	movmi	r3, #43	; 0x2b
 800487e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004882:	f89a 3000 	ldrb.w	r3, [sl]
 8004886:	2b2a      	cmp	r3, #42	; 0x2a
 8004888:	d015      	beq.n	80048b6 <_svfiprintf_r+0xf6>
 800488a:	9a07      	ldr	r2, [sp, #28]
 800488c:	4654      	mov	r4, sl
 800488e:	2000      	movs	r0, #0
 8004890:	f04f 0c0a 	mov.w	ip, #10
 8004894:	4621      	mov	r1, r4
 8004896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800489a:	3b30      	subs	r3, #48	; 0x30
 800489c:	2b09      	cmp	r3, #9
 800489e:	d94e      	bls.n	800493e <_svfiprintf_r+0x17e>
 80048a0:	b1b0      	cbz	r0, 80048d0 <_svfiprintf_r+0x110>
 80048a2:	9207      	str	r2, [sp, #28]
 80048a4:	e014      	b.n	80048d0 <_svfiprintf_r+0x110>
 80048a6:	eba0 0308 	sub.w	r3, r0, r8
 80048aa:	fa09 f303 	lsl.w	r3, r9, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	46a2      	mov	sl, r4
 80048b4:	e7d2      	b.n	800485c <_svfiprintf_r+0x9c>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	9103      	str	r1, [sp, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbb      	ittet	lt
 80048c2:	425b      	neglt	r3, r3
 80048c4:	f042 0202 	orrlt.w	r2, r2, #2
 80048c8:	9307      	strge	r3, [sp, #28]
 80048ca:	9307      	strlt	r3, [sp, #28]
 80048cc:	bfb8      	it	lt
 80048ce:	9204      	strlt	r2, [sp, #16]
 80048d0:	7823      	ldrb	r3, [r4, #0]
 80048d2:	2b2e      	cmp	r3, #46	; 0x2e
 80048d4:	d10c      	bne.n	80048f0 <_svfiprintf_r+0x130>
 80048d6:	7863      	ldrb	r3, [r4, #1]
 80048d8:	2b2a      	cmp	r3, #42	; 0x2a
 80048da:	d135      	bne.n	8004948 <_svfiprintf_r+0x188>
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	1d1a      	adds	r2, r3, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	9203      	str	r2, [sp, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bfb8      	it	lt
 80048e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80048ec:	3402      	adds	r4, #2
 80048ee:	9305      	str	r3, [sp, #20]
 80048f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049bc <_svfiprintf_r+0x1fc>
 80048f4:	7821      	ldrb	r1, [r4, #0]
 80048f6:	2203      	movs	r2, #3
 80048f8:	4650      	mov	r0, sl
 80048fa:	f7fb fc91 	bl	8000220 <memchr>
 80048fe:	b140      	cbz	r0, 8004912 <_svfiprintf_r+0x152>
 8004900:	2340      	movs	r3, #64	; 0x40
 8004902:	eba0 000a 	sub.w	r0, r0, sl
 8004906:	fa03 f000 	lsl.w	r0, r3, r0
 800490a:	9b04      	ldr	r3, [sp, #16]
 800490c:	4303      	orrs	r3, r0
 800490e:	3401      	adds	r4, #1
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004916:	4826      	ldr	r0, [pc, #152]	; (80049b0 <_svfiprintf_r+0x1f0>)
 8004918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800491c:	2206      	movs	r2, #6
 800491e:	f7fb fc7f 	bl	8000220 <memchr>
 8004922:	2800      	cmp	r0, #0
 8004924:	d038      	beq.n	8004998 <_svfiprintf_r+0x1d8>
 8004926:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <_svfiprintf_r+0x1f4>)
 8004928:	bb1b      	cbnz	r3, 8004972 <_svfiprintf_r+0x1b2>
 800492a:	9b03      	ldr	r3, [sp, #12]
 800492c:	3307      	adds	r3, #7
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	3308      	adds	r3, #8
 8004934:	9303      	str	r3, [sp, #12]
 8004936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004938:	4433      	add	r3, r6
 800493a:	9309      	str	r3, [sp, #36]	; 0x24
 800493c:	e767      	b.n	800480e <_svfiprintf_r+0x4e>
 800493e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004942:	460c      	mov	r4, r1
 8004944:	2001      	movs	r0, #1
 8004946:	e7a5      	b.n	8004894 <_svfiprintf_r+0xd4>
 8004948:	2300      	movs	r3, #0
 800494a:	3401      	adds	r4, #1
 800494c:	9305      	str	r3, [sp, #20]
 800494e:	4619      	mov	r1, r3
 8004950:	f04f 0c0a 	mov.w	ip, #10
 8004954:	4620      	mov	r0, r4
 8004956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800495a:	3a30      	subs	r2, #48	; 0x30
 800495c:	2a09      	cmp	r2, #9
 800495e:	d903      	bls.n	8004968 <_svfiprintf_r+0x1a8>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0c5      	beq.n	80048f0 <_svfiprintf_r+0x130>
 8004964:	9105      	str	r1, [sp, #20]
 8004966:	e7c3      	b.n	80048f0 <_svfiprintf_r+0x130>
 8004968:	fb0c 2101 	mla	r1, ip, r1, r2
 800496c:	4604      	mov	r4, r0
 800496e:	2301      	movs	r3, #1
 8004970:	e7f0      	b.n	8004954 <_svfiprintf_r+0x194>
 8004972:	ab03      	add	r3, sp, #12
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	462a      	mov	r2, r5
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <_svfiprintf_r+0x1f8>)
 800497a:	a904      	add	r1, sp, #16
 800497c:	4638      	mov	r0, r7
 800497e:	f3af 8000 	nop.w
 8004982:	1c42      	adds	r2, r0, #1
 8004984:	4606      	mov	r6, r0
 8004986:	d1d6      	bne.n	8004936 <_svfiprintf_r+0x176>
 8004988:	89ab      	ldrh	r3, [r5, #12]
 800498a:	065b      	lsls	r3, r3, #25
 800498c:	f53f af2c 	bmi.w	80047e8 <_svfiprintf_r+0x28>
 8004990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004992:	b01d      	add	sp, #116	; 0x74
 8004994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004998:	ab03      	add	r3, sp, #12
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	462a      	mov	r2, r5
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <_svfiprintf_r+0x1f8>)
 80049a0:	a904      	add	r1, sp, #16
 80049a2:	4638      	mov	r0, r7
 80049a4:	f000 f87a 	bl	8004a9c <_printf_i>
 80049a8:	e7eb      	b.n	8004982 <_svfiprintf_r+0x1c2>
 80049aa:	bf00      	nop
 80049ac:	08005008 	.word	0x08005008
 80049b0:	08005012 	.word	0x08005012
 80049b4:	00000000 	.word	0x00000000
 80049b8:	08004709 	.word	0x08004709
 80049bc:	0800500e 	.word	0x0800500e

080049c0 <_printf_common>:
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	4616      	mov	r6, r2
 80049c6:	4699      	mov	r9, r3
 80049c8:	688a      	ldr	r2, [r1, #8]
 80049ca:	690b      	ldr	r3, [r1, #16]
 80049cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bfb8      	it	lt
 80049d4:	4613      	movlt	r3, r2
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049dc:	4607      	mov	r7, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	b10a      	cbz	r2, 80049e6 <_printf_common+0x26>
 80049e2:	3301      	adds	r3, #1
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	0699      	lsls	r1, r3, #26
 80049ea:	bf42      	ittt	mi
 80049ec:	6833      	ldrmi	r3, [r6, #0]
 80049ee:	3302      	addmi	r3, #2
 80049f0:	6033      	strmi	r3, [r6, #0]
 80049f2:	6825      	ldr	r5, [r4, #0]
 80049f4:	f015 0506 	ands.w	r5, r5, #6
 80049f8:	d106      	bne.n	8004a08 <_printf_common+0x48>
 80049fa:	f104 0a19 	add.w	sl, r4, #25
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	6832      	ldr	r2, [r6, #0]
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dc26      	bgt.n	8004a56 <_printf_common+0x96>
 8004a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a0c:	1e13      	subs	r3, r2, #0
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	bf18      	it	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	0692      	lsls	r2, r2, #26
 8004a16:	d42b      	bmi.n	8004a70 <_printf_common+0xb0>
 8004a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c0      	blx	r8
 8004a22:	3001      	adds	r0, #1
 8004a24:	d01e      	beq.n	8004a64 <_printf_common+0xa4>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	68e5      	ldr	r5, [r4, #12]
 8004a2a:	6832      	ldr	r2, [r6, #0]
 8004a2c:	f003 0306 	and.w	r3, r3, #6
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	bf08      	it	eq
 8004a34:	1aad      	subeq	r5, r5, r2
 8004a36:	68a3      	ldr	r3, [r4, #8]
 8004a38:	6922      	ldr	r2, [r4, #16]
 8004a3a:	bf0c      	ite	eq
 8004a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a40:	2500      	movne	r5, #0
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bfc4      	itt	gt
 8004a46:	1a9b      	subgt	r3, r3, r2
 8004a48:	18ed      	addgt	r5, r5, r3
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	341a      	adds	r4, #26
 8004a4e:	42b5      	cmp	r5, r6
 8004a50:	d11a      	bne.n	8004a88 <_printf_common+0xc8>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e008      	b.n	8004a68 <_printf_common+0xa8>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4652      	mov	r2, sl
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	47c0      	blx	r8
 8004a60:	3001      	adds	r0, #1
 8004a62:	d103      	bne.n	8004a6c <_printf_common+0xac>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	e7c6      	b.n	80049fe <_printf_common+0x3e>
 8004a70:	18e1      	adds	r1, r4, r3
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	2030      	movs	r0, #48	; 0x30
 8004a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a7a:	4422      	add	r2, r4
 8004a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a84:	3302      	adds	r3, #2
 8004a86:	e7c7      	b.n	8004a18 <_printf_common+0x58>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	3001      	adds	r0, #1
 8004a94:	d0e6      	beq.n	8004a64 <_printf_common+0xa4>
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7d9      	b.n	8004a4e <_printf_common+0x8e>
	...

08004a9c <_printf_i>:
 8004a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	7e0f      	ldrb	r7, [r1, #24]
 8004aa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004aa4:	2f78      	cmp	r7, #120	; 0x78
 8004aa6:	4691      	mov	r9, r2
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	469a      	mov	sl, r3
 8004aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ab2:	d807      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ab4:	2f62      	cmp	r7, #98	; 0x62
 8004ab6:	d80a      	bhi.n	8004ace <_printf_i+0x32>
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	f000 80d8 	beq.w	8004c6e <_printf_i+0x1d2>
 8004abe:	2f58      	cmp	r7, #88	; 0x58
 8004ac0:	f000 80a3 	beq.w	8004c0a <_printf_i+0x16e>
 8004ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004acc:	e03a      	b.n	8004b44 <_printf_i+0xa8>
 8004ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ad2:	2b15      	cmp	r3, #21
 8004ad4:	d8f6      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ad6:	a101      	add	r1, pc, #4	; (adr r1, 8004adc <_printf_i+0x40>)
 8004ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b49 	.word	0x08004b49
 8004ae4:	08004ac5 	.word	0x08004ac5
 8004ae8:	08004ac5 	.word	0x08004ac5
 8004aec:	08004ac5 	.word	0x08004ac5
 8004af0:	08004ac5 	.word	0x08004ac5
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004ac5 	.word	0x08004ac5
 8004afc:	08004ac5 	.word	0x08004ac5
 8004b00:	08004ac5 	.word	0x08004ac5
 8004b04:	08004ac5 	.word	0x08004ac5
 8004b08:	08004c55 	.word	0x08004c55
 8004b0c:	08004b79 	.word	0x08004b79
 8004b10:	08004c37 	.word	0x08004c37
 8004b14:	08004ac5 	.word	0x08004ac5
 8004b18:	08004ac5 	.word	0x08004ac5
 8004b1c:	08004c77 	.word	0x08004c77
 8004b20:	08004ac5 	.word	0x08004ac5
 8004b24:	08004b79 	.word	0x08004b79
 8004b28:	08004ac5 	.word	0x08004ac5
 8004b2c:	08004ac5 	.word	0x08004ac5
 8004b30:	08004c3f 	.word	0x08004c3f
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	602a      	str	r2, [r5, #0]
 8004b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0a3      	b.n	8004c90 <_printf_i+0x1f4>
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	6829      	ldr	r1, [r5, #0]
 8004b4c:	0606      	lsls	r6, r0, #24
 8004b4e:	f101 0304 	add.w	r3, r1, #4
 8004b52:	d50a      	bpl.n	8004b6a <_printf_i+0xce>
 8004b54:	680e      	ldr	r6, [r1, #0]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	2e00      	cmp	r6, #0
 8004b5a:	da03      	bge.n	8004b64 <_printf_i+0xc8>
 8004b5c:	232d      	movs	r3, #45	; 0x2d
 8004b5e:	4276      	negs	r6, r6
 8004b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b64:	485e      	ldr	r0, [pc, #376]	; (8004ce0 <_printf_i+0x244>)
 8004b66:	230a      	movs	r3, #10
 8004b68:	e019      	b.n	8004b9e <_printf_i+0x102>
 8004b6a:	680e      	ldr	r6, [r1, #0]
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b72:	bf18      	it	ne
 8004b74:	b236      	sxthne	r6, r6
 8004b76:	e7ef      	b.n	8004b58 <_printf_i+0xbc>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	6029      	str	r1, [r5, #0]
 8004b80:	0601      	lsls	r1, r0, #24
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0xec>
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0xf2>
 8004b88:	0646      	lsls	r6, r0, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0xe8>
 8004b8c:	881e      	ldrh	r6, [r3, #0]
 8004b8e:	4854      	ldr	r0, [pc, #336]	; (8004ce0 <_printf_i+0x244>)
 8004b90:	2f6f      	cmp	r7, #111	; 0x6f
 8004b92:	bf0c      	ite	eq
 8004b94:	2308      	moveq	r3, #8
 8004b96:	230a      	movne	r3, #10
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9e:	6865      	ldr	r5, [r4, #4]
 8004ba0:	60a5      	str	r5, [r4, #8]
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	bfa2      	ittt	ge
 8004ba6:	6821      	ldrge	r1, [r4, #0]
 8004ba8:	f021 0104 	bicge.w	r1, r1, #4
 8004bac:	6021      	strge	r1, [r4, #0]
 8004bae:	b90e      	cbnz	r6, 8004bb4 <_printf_i+0x118>
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	d04d      	beq.n	8004c50 <_printf_i+0x1b4>
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bba:	fb03 6711 	mls	r7, r3, r1, r6
 8004bbe:	5dc7      	ldrb	r7, [r0, r7]
 8004bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bc4:	4637      	mov	r7, r6
 8004bc6:	42bb      	cmp	r3, r7
 8004bc8:	460e      	mov	r6, r1
 8004bca:	d9f4      	bls.n	8004bb6 <_printf_i+0x11a>
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d10b      	bne.n	8004be8 <_printf_i+0x14c>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	07de      	lsls	r6, r3, #31
 8004bd4:	d508      	bpl.n	8004be8 <_printf_i+0x14c>
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	6861      	ldr	r1, [r4, #4]
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	bfde      	ittt	le
 8004bde:	2330      	movle	r3, #48	; 0x30
 8004be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004be8:	1b52      	subs	r2, r2, r5
 8004bea:	6122      	str	r2, [r4, #16]
 8004bec:	f8cd a000 	str.w	sl, [sp]
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	aa03      	add	r2, sp, #12
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f7ff fee2 	bl	80049c0 <_printf_common>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d14c      	bne.n	8004c9a <_printf_i+0x1fe>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	b004      	add	sp, #16
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0a:	4835      	ldr	r0, [pc, #212]	; (8004ce0 <_printf_i+0x244>)
 8004c0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c10:	6829      	ldr	r1, [r5, #0]
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c18:	6029      	str	r1, [r5, #0]
 8004c1a:	061d      	lsls	r5, r3, #24
 8004c1c:	d514      	bpl.n	8004c48 <_printf_i+0x1ac>
 8004c1e:	07df      	lsls	r7, r3, #31
 8004c20:	bf44      	itt	mi
 8004c22:	f043 0320 	orrmi.w	r3, r3, #32
 8004c26:	6023      	strmi	r3, [r4, #0]
 8004c28:	b91e      	cbnz	r6, 8004c32 <_printf_i+0x196>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f023 0320 	bic.w	r3, r3, #32
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	2310      	movs	r3, #16
 8004c34:	e7b0      	b.n	8004b98 <_printf_i+0xfc>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	f043 0320 	orr.w	r3, r3, #32
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	2378      	movs	r3, #120	; 0x78
 8004c40:	4828      	ldr	r0, [pc, #160]	; (8004ce4 <_printf_i+0x248>)
 8004c42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c46:	e7e3      	b.n	8004c10 <_printf_i+0x174>
 8004c48:	0659      	lsls	r1, r3, #25
 8004c4a:	bf48      	it	mi
 8004c4c:	b2b6      	uxthmi	r6, r6
 8004c4e:	e7e6      	b.n	8004c1e <_printf_i+0x182>
 8004c50:	4615      	mov	r5, r2
 8004c52:	e7bb      	b.n	8004bcc <_printf_i+0x130>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	6826      	ldr	r6, [r4, #0]
 8004c58:	6961      	ldr	r1, [r4, #20]
 8004c5a:	1d18      	adds	r0, r3, #4
 8004c5c:	6028      	str	r0, [r5, #0]
 8004c5e:	0635      	lsls	r5, r6, #24
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	d501      	bpl.n	8004c68 <_printf_i+0x1cc>
 8004c64:	6019      	str	r1, [r3, #0]
 8004c66:	e002      	b.n	8004c6e <_printf_i+0x1d2>
 8004c68:	0670      	lsls	r0, r6, #25
 8004c6a:	d5fb      	bpl.n	8004c64 <_printf_i+0x1c8>
 8004c6c:	8019      	strh	r1, [r3, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	4615      	mov	r5, r2
 8004c74:	e7ba      	b.n	8004bec <_printf_i+0x150>
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	1d1a      	adds	r2, r3, #4
 8004c7a:	602a      	str	r2, [r5, #0]
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	6862      	ldr	r2, [r4, #4]
 8004c80:	2100      	movs	r1, #0
 8004c82:	4628      	mov	r0, r5
 8004c84:	f7fb facc 	bl	8000220 <memchr>
 8004c88:	b108      	cbz	r0, 8004c8e <_printf_i+0x1f2>
 8004c8a:	1b40      	subs	r0, r0, r5
 8004c8c:	6060      	str	r0, [r4, #4]
 8004c8e:	6863      	ldr	r3, [r4, #4]
 8004c90:	6123      	str	r3, [r4, #16]
 8004c92:	2300      	movs	r3, #0
 8004c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c98:	e7a8      	b.n	8004bec <_printf_i+0x150>
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	47d0      	blx	sl
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d0ab      	beq.n	8004c00 <_printf_i+0x164>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	079b      	lsls	r3, r3, #30
 8004cac:	d413      	bmi.n	8004cd6 <_printf_i+0x23a>
 8004cae:	68e0      	ldr	r0, [r4, #12]
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	4298      	cmp	r0, r3
 8004cb4:	bfb8      	it	lt
 8004cb6:	4618      	movlt	r0, r3
 8004cb8:	e7a4      	b.n	8004c04 <_printf_i+0x168>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	47d0      	blx	sl
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d09b      	beq.n	8004c00 <_printf_i+0x164>
 8004cc8:	3501      	adds	r5, #1
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	9903      	ldr	r1, [sp, #12]
 8004cce:	1a5b      	subs	r3, r3, r1
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	dcf2      	bgt.n	8004cba <_printf_i+0x21e>
 8004cd4:	e7eb      	b.n	8004cae <_printf_i+0x212>
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	f104 0619 	add.w	r6, r4, #25
 8004cdc:	e7f5      	b.n	8004cca <_printf_i+0x22e>
 8004cde:	bf00      	nop
 8004ce0:	08005019 	.word	0x08005019
 8004ce4:	0800502a 	.word	0x0800502a

08004ce8 <memmove>:
 8004ce8:	4288      	cmp	r0, r1
 8004cea:	b510      	push	{r4, lr}
 8004cec:	eb01 0402 	add.w	r4, r1, r2
 8004cf0:	d902      	bls.n	8004cf8 <memmove+0x10>
 8004cf2:	4284      	cmp	r4, r0
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	d807      	bhi.n	8004d08 <memmove+0x20>
 8004cf8:	1e43      	subs	r3, r0, #1
 8004cfa:	42a1      	cmp	r1, r4
 8004cfc:	d008      	beq.n	8004d10 <memmove+0x28>
 8004cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d06:	e7f8      	b.n	8004cfa <memmove+0x12>
 8004d08:	4402      	add	r2, r0
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	428a      	cmp	r2, r1
 8004d0e:	d100      	bne.n	8004d12 <memmove+0x2a>
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d1a:	e7f7      	b.n	8004d0c <memmove+0x24>

08004d1c <_free_r>:
 8004d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d1e:	2900      	cmp	r1, #0
 8004d20:	d044      	beq.n	8004dac <_free_r+0x90>
 8004d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d26:	9001      	str	r0, [sp, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d2e:	bfb8      	it	lt
 8004d30:	18e4      	addlt	r4, r4, r3
 8004d32:	f000 f913 	bl	8004f5c <__malloc_lock>
 8004d36:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <_free_r+0x94>)
 8004d38:	9801      	ldr	r0, [sp, #4]
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	b933      	cbnz	r3, 8004d4c <_free_r+0x30>
 8004d3e:	6063      	str	r3, [r4, #4]
 8004d40:	6014      	str	r4, [r2, #0]
 8004d42:	b003      	add	sp, #12
 8004d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d48:	f000 b90e 	b.w	8004f68 <__malloc_unlock>
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	d908      	bls.n	8004d62 <_free_r+0x46>
 8004d50:	6825      	ldr	r5, [r4, #0]
 8004d52:	1961      	adds	r1, r4, r5
 8004d54:	428b      	cmp	r3, r1
 8004d56:	bf01      	itttt	eq
 8004d58:	6819      	ldreq	r1, [r3, #0]
 8004d5a:	685b      	ldreq	r3, [r3, #4]
 8004d5c:	1949      	addeq	r1, r1, r5
 8004d5e:	6021      	streq	r1, [r4, #0]
 8004d60:	e7ed      	b.n	8004d3e <_free_r+0x22>
 8004d62:	461a      	mov	r2, r3
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b10b      	cbz	r3, 8004d6c <_free_r+0x50>
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	d9fa      	bls.n	8004d62 <_free_r+0x46>
 8004d6c:	6811      	ldr	r1, [r2, #0]
 8004d6e:	1855      	adds	r5, r2, r1
 8004d70:	42a5      	cmp	r5, r4
 8004d72:	d10b      	bne.n	8004d8c <_free_r+0x70>
 8004d74:	6824      	ldr	r4, [r4, #0]
 8004d76:	4421      	add	r1, r4
 8004d78:	1854      	adds	r4, r2, r1
 8004d7a:	42a3      	cmp	r3, r4
 8004d7c:	6011      	str	r1, [r2, #0]
 8004d7e:	d1e0      	bne.n	8004d42 <_free_r+0x26>
 8004d80:	681c      	ldr	r4, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	6053      	str	r3, [r2, #4]
 8004d86:	4421      	add	r1, r4
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	e7da      	b.n	8004d42 <_free_r+0x26>
 8004d8c:	d902      	bls.n	8004d94 <_free_r+0x78>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	6003      	str	r3, [r0, #0]
 8004d92:	e7d6      	b.n	8004d42 <_free_r+0x26>
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	1961      	adds	r1, r4, r5
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	bf04      	itt	eq
 8004d9c:	6819      	ldreq	r1, [r3, #0]
 8004d9e:	685b      	ldreq	r3, [r3, #4]
 8004da0:	6063      	str	r3, [r4, #4]
 8004da2:	bf04      	itt	eq
 8004da4:	1949      	addeq	r1, r1, r5
 8004da6:	6021      	streq	r1, [r4, #0]
 8004da8:	6054      	str	r4, [r2, #4]
 8004daa:	e7ca      	b.n	8004d42 <_free_r+0x26>
 8004dac:	b003      	add	sp, #12
 8004dae:	bd30      	pop	{r4, r5, pc}
 8004db0:	2000026c 	.word	0x2000026c

08004db4 <sbrk_aligned>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4e0e      	ldr	r6, [pc, #56]	; (8004df0 <sbrk_aligned+0x3c>)
 8004db8:	460c      	mov	r4, r1
 8004dba:	6831      	ldr	r1, [r6, #0]
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	b911      	cbnz	r1, 8004dc6 <sbrk_aligned+0x12>
 8004dc0:	f000 f8bc 	bl	8004f3c <_sbrk_r>
 8004dc4:	6030      	str	r0, [r6, #0]
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f8b7 	bl	8004f3c <_sbrk_r>
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	d00a      	beq.n	8004de8 <sbrk_aligned+0x34>
 8004dd2:	1cc4      	adds	r4, r0, #3
 8004dd4:	f024 0403 	bic.w	r4, r4, #3
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d007      	beq.n	8004dec <sbrk_aligned+0x38>
 8004ddc:	1a21      	subs	r1, r4, r0
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 f8ac 	bl	8004f3c <_sbrk_r>
 8004de4:	3001      	adds	r0, #1
 8004de6:	d101      	bne.n	8004dec <sbrk_aligned+0x38>
 8004de8:	f04f 34ff 	mov.w	r4, #4294967295
 8004dec:	4620      	mov	r0, r4
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	20000270 	.word	0x20000270

08004df4 <_malloc_r>:
 8004df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df8:	1ccd      	adds	r5, r1, #3
 8004dfa:	f025 0503 	bic.w	r5, r5, #3
 8004dfe:	3508      	adds	r5, #8
 8004e00:	2d0c      	cmp	r5, #12
 8004e02:	bf38      	it	cc
 8004e04:	250c      	movcc	r5, #12
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	4607      	mov	r7, r0
 8004e0a:	db01      	blt.n	8004e10 <_malloc_r+0x1c>
 8004e0c:	42a9      	cmp	r1, r5
 8004e0e:	d905      	bls.n	8004e1c <_malloc_r+0x28>
 8004e10:	230c      	movs	r3, #12
 8004e12:	603b      	str	r3, [r7, #0]
 8004e14:	2600      	movs	r6, #0
 8004e16:	4630      	mov	r0, r6
 8004e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e1c:	4e2e      	ldr	r6, [pc, #184]	; (8004ed8 <_malloc_r+0xe4>)
 8004e1e:	f000 f89d 	bl	8004f5c <__malloc_lock>
 8004e22:	6833      	ldr	r3, [r6, #0]
 8004e24:	461c      	mov	r4, r3
 8004e26:	bb34      	cbnz	r4, 8004e76 <_malloc_r+0x82>
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f7ff ffc2 	bl	8004db4 <sbrk_aligned>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	4604      	mov	r4, r0
 8004e34:	d14d      	bne.n	8004ed2 <_malloc_r+0xde>
 8004e36:	6834      	ldr	r4, [r6, #0]
 8004e38:	4626      	mov	r6, r4
 8004e3a:	2e00      	cmp	r6, #0
 8004e3c:	d140      	bne.n	8004ec0 <_malloc_r+0xcc>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	4631      	mov	r1, r6
 8004e42:	4638      	mov	r0, r7
 8004e44:	eb04 0803 	add.w	r8, r4, r3
 8004e48:	f000 f878 	bl	8004f3c <_sbrk_r>
 8004e4c:	4580      	cmp	r8, r0
 8004e4e:	d13a      	bne.n	8004ec6 <_malloc_r+0xd2>
 8004e50:	6821      	ldr	r1, [r4, #0]
 8004e52:	3503      	adds	r5, #3
 8004e54:	1a6d      	subs	r5, r5, r1
 8004e56:	f025 0503 	bic.w	r5, r5, #3
 8004e5a:	3508      	adds	r5, #8
 8004e5c:	2d0c      	cmp	r5, #12
 8004e5e:	bf38      	it	cc
 8004e60:	250c      	movcc	r5, #12
 8004e62:	4629      	mov	r1, r5
 8004e64:	4638      	mov	r0, r7
 8004e66:	f7ff ffa5 	bl	8004db4 <sbrk_aligned>
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d02b      	beq.n	8004ec6 <_malloc_r+0xd2>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	442b      	add	r3, r5
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	e00e      	b.n	8004e94 <_malloc_r+0xa0>
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	1b52      	subs	r2, r2, r5
 8004e7a:	d41e      	bmi.n	8004eba <_malloc_r+0xc6>
 8004e7c:	2a0b      	cmp	r2, #11
 8004e7e:	d916      	bls.n	8004eae <_malloc_r+0xba>
 8004e80:	1961      	adds	r1, r4, r5
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	6025      	str	r5, [r4, #0]
 8004e86:	bf18      	it	ne
 8004e88:	6059      	strne	r1, [r3, #4]
 8004e8a:	6863      	ldr	r3, [r4, #4]
 8004e8c:	bf08      	it	eq
 8004e8e:	6031      	streq	r1, [r6, #0]
 8004e90:	5162      	str	r2, [r4, r5]
 8004e92:	604b      	str	r3, [r1, #4]
 8004e94:	4638      	mov	r0, r7
 8004e96:	f104 060b 	add.w	r6, r4, #11
 8004e9a:	f000 f865 	bl	8004f68 <__malloc_unlock>
 8004e9e:	f026 0607 	bic.w	r6, r6, #7
 8004ea2:	1d23      	adds	r3, r4, #4
 8004ea4:	1af2      	subs	r2, r6, r3
 8004ea6:	d0b6      	beq.n	8004e16 <_malloc_r+0x22>
 8004ea8:	1b9b      	subs	r3, r3, r6
 8004eaa:	50a3      	str	r3, [r4, r2]
 8004eac:	e7b3      	b.n	8004e16 <_malloc_r+0x22>
 8004eae:	6862      	ldr	r2, [r4, #4]
 8004eb0:	42a3      	cmp	r3, r4
 8004eb2:	bf0c      	ite	eq
 8004eb4:	6032      	streq	r2, [r6, #0]
 8004eb6:	605a      	strne	r2, [r3, #4]
 8004eb8:	e7ec      	b.n	8004e94 <_malloc_r+0xa0>
 8004eba:	4623      	mov	r3, r4
 8004ebc:	6864      	ldr	r4, [r4, #4]
 8004ebe:	e7b2      	b.n	8004e26 <_malloc_r+0x32>
 8004ec0:	4634      	mov	r4, r6
 8004ec2:	6876      	ldr	r6, [r6, #4]
 8004ec4:	e7b9      	b.n	8004e3a <_malloc_r+0x46>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4638      	mov	r0, r7
 8004ecc:	f000 f84c 	bl	8004f68 <__malloc_unlock>
 8004ed0:	e7a1      	b.n	8004e16 <_malloc_r+0x22>
 8004ed2:	6025      	str	r5, [r4, #0]
 8004ed4:	e7de      	b.n	8004e94 <_malloc_r+0xa0>
 8004ed6:	bf00      	nop
 8004ed8:	2000026c 	.word	0x2000026c

08004edc <_realloc_r>:
 8004edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee0:	4680      	mov	r8, r0
 8004ee2:	4614      	mov	r4, r2
 8004ee4:	460e      	mov	r6, r1
 8004ee6:	b921      	cbnz	r1, 8004ef2 <_realloc_r+0x16>
 8004ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eec:	4611      	mov	r1, r2
 8004eee:	f7ff bf81 	b.w	8004df4 <_malloc_r>
 8004ef2:	b92a      	cbnz	r2, 8004f00 <_realloc_r+0x24>
 8004ef4:	f7ff ff12 	bl	8004d1c <_free_r>
 8004ef8:	4625      	mov	r5, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f00:	f000 f838 	bl	8004f74 <_malloc_usable_size_r>
 8004f04:	4284      	cmp	r4, r0
 8004f06:	4607      	mov	r7, r0
 8004f08:	d802      	bhi.n	8004f10 <_realloc_r+0x34>
 8004f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f0e:	d812      	bhi.n	8004f36 <_realloc_r+0x5a>
 8004f10:	4621      	mov	r1, r4
 8004f12:	4640      	mov	r0, r8
 8004f14:	f7ff ff6e 	bl	8004df4 <_malloc_r>
 8004f18:	4605      	mov	r5, r0
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d0ed      	beq.n	8004efa <_realloc_r+0x1e>
 8004f1e:	42bc      	cmp	r4, r7
 8004f20:	4622      	mov	r2, r4
 8004f22:	4631      	mov	r1, r6
 8004f24:	bf28      	it	cs
 8004f26:	463a      	movcs	r2, r7
 8004f28:	f7ff fba4 	bl	8004674 <memcpy>
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4640      	mov	r0, r8
 8004f30:	f7ff fef4 	bl	8004d1c <_free_r>
 8004f34:	e7e1      	b.n	8004efa <_realloc_r+0x1e>
 8004f36:	4635      	mov	r5, r6
 8004f38:	e7df      	b.n	8004efa <_realloc_r+0x1e>
	...

08004f3c <_sbrk_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d06      	ldr	r5, [pc, #24]	; (8004f58 <_sbrk_r+0x1c>)
 8004f40:	2300      	movs	r3, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	f7fd f80e 	bl	8001f68 <_sbrk>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_sbrk_r+0x1a>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_sbrk_r+0x1a>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	20000274 	.word	0x20000274

08004f5c <__malloc_lock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	; (8004f64 <__malloc_lock+0x8>)
 8004f5e:	f000 b811 	b.w	8004f84 <__retarget_lock_acquire_recursive>
 8004f62:	bf00      	nop
 8004f64:	20000278 	.word	0x20000278

08004f68 <__malloc_unlock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <__malloc_unlock+0x8>)
 8004f6a:	f000 b80c 	b.w	8004f86 <__retarget_lock_release_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20000278 	.word	0x20000278

08004f74 <_malloc_usable_size_r>:
 8004f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f78:	1f18      	subs	r0, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bfbc      	itt	lt
 8004f7e:	580b      	ldrlt	r3, [r1, r0]
 8004f80:	18c0      	addlt	r0, r0, r3
 8004f82:	4770      	bx	lr

08004f84 <__retarget_lock_acquire_recursive>:
 8004f84:	4770      	bx	lr

08004f86 <__retarget_lock_release_recursive>:
 8004f86:	4770      	bx	lr

08004f88 <_init>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr

08004f94 <_fini>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr
